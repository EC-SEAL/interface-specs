openapi: 3.0.1
info:
  title: SEAL Service Microservice Specification
  description: This document contains the formal specification of all standard module
    interfaces in SEAL Service. Take into account that parameters marked as cookie
    type, will instead be passed through the session object**
    # Updated to v0.0.3 for: (1) fixing warnings passing cookies (2) Adding dsResponse in the acm/response and (3) Changing Get revoked/list/set to a post
  version: 0.0.3
servers:
- url: /
tags:
- name: ConfigManager
  description: ""
- name: SessionManager
  description: ""
- name: APIGatewayClient
  description: ""
- name: APIGatewaySP
  description: ""
- name: RequestManager
  description: ""
- name: SPService
  description: ""
- name: AuthenticationSource
  description: ""
- name: IdentitySource
  description: ""
- name: Persistence
  description: ""
- name: IDBootstrapping
  description: ""
- name: IDLinking
  description: ""
- name: APIGatewayLink
  description: ""
- name: VerifiableClaimIssuing
  description: ""
- name: Revocation
  description: ""
paths:
  /sm/startSession:
    post:
      tags:
      - SessionManager
      summary: 'Sets up an internal session temporary storage and returns its identifierby
        setting the code to NEW and the identifier at sessionData.sessionId '
      operationId: startSessionUsingPOST
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /sm/endSession:
    delete:
      tags:
      - SessionManager
      summary: Terminates a session and deletes all the stored data by setting the
        code to OK
      operationId: endSessionUsingDELETE
      parameters:
      - name: sessionId
        in: query
        description: sessionId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        204:
          description: No Content
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
      deprecated: false
  /sm/getSession:
    get:
      tags:
      - SessionManager
      summary: 'Returns the internal session identifier by querying using the UUID
        of an exteranal the session request. E.g. eIDAS request identifier, The identifier
        must be previously stored in the sessionResponds; code:OK, sessionData.sessionId:
        the internal sessionId that matches the request params'
      operationId: getSessionFromIdPUUUIDUsingGET
      parameters:
      - name: varName
        in: query
        description: varName
        schema:
          type: string
      - name: varValue
        in: query
        description: varValue
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /sm/getSessionData:
    get:
      tags:
      - SessionManager
      summary: 'A variable Or the whole session object  is retrieved. Responds by
        code:OK, sessionData:{sessionId: the session, sessioVarialbes: map of variables,values}'
      operationId: getSessionDataUsingGET
      parameters:
      - name: sessionId
        in: query
        description: sessionId
        required: true
        schema:
          type: string
      - name: variableName
        in: query
        description: variableName
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /sm/updateSessionData:
    post:
      tags:
      - SessionManager
      summary: 'Passed data is stored in a session variable overwriting the previous
        value. If no session variable is given, then the whole data stored in this
        session will be replaced with the passed dataObject, in that case the dataObject
        must be a dictionarycontaining paris of key, values e.g. {key1:value1, key2:value2}
        with keys and values strings (the latter may be json) Responds by setting
        code = OK " '
      operationId: updateSessionDataUsingPOST
      requestBody:
        description: updateRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateDataRequest'
        required: true
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: updateRequest
  /sm/generateToken:
    get:
      tags:
      - SessionManager
      summary: 'Generates a signed token, only the sessionId as the payload, additionaly
        parameters include: The id of the requesting microservice (msA) and The id
        of the destination microservice (msB), may also include additional data Responds
        by code: New, additionalData: the jwt token'
      operationId: generateTokenUsingGET
      parameters:
      - name: data
        in: query
        description: data
        schema:
          type: string
      - name: receiver
        in: query
        description: receiver
        required: true
        schema:
          type: string
      - name: sender
        in: query
        description: sender
        required: true
        schema:
          type: string
      - name: sessionId
        in: query
        description: sessionId
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /sm/validateToken:
    get:
      tags:
      - SessionManager
      summary: 'The passed security tokenâ€™s signature will be validated, as well as
        the validity as well as other validation measuresResponds by code: OK, sessionData.sessionId
        the sessionId used to gen. the jwt, and additionalData: extraData that were
        used to generate the jwt'
      operationId: validateTokenUsingGET
      parameters:
      - name: token
        in: query
        description: token
        required: true
        schema:
          type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
  /sm/generateTokenWithPayload:
    post:
      tags:
      - SessionManager
      summary: Generates a signed token with the sessionId and the json payload sent
        in the body. Equivalent to /sm/generateToken but for bigger payloads
      operationId: generateTokenWithPayloadUsingPOST
      parameters:
      - name: receiver
        in: query
        description: receiver
        required: true
        schema:
          type: string
      - name: sender
        in: query
        description: sender
        required: true
        schema:
          type: string
      - name: sessionId
        in: query
        description: sessionId
        required: true
        schema:
          type: string
      requestBody:
        description: The request params object, with json object, with the 'data'
          field filled in with the additional data to include on the token
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestParameters'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: requestParameters
  /sm/new/add:
    post:
      tags:
      - new-api-rest
      summary: adds the given data, under the provided session and for the given id.
        Error if no sesion is found
      operationId: addUsingPOST
      requestBody:
        description: updateRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUpdateDataRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: updateRequest
  /sm/new/delete:
    post:
      tags:
      - new-api-rest
      summary: deletes the given object (based on id) from the session
      operationId: deleteUsingPOST
      requestBody:
        description: deleteRequest
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NewUpdateDataRequest'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: deleteRequest
  /sm/new/get:
    post:
      tags:
      - new-api-rest
      summary: returns in the extraData  the object (JSON strigified) for the given
        session id and object id, or if not object id, the array of all objects for
        the given sessionID
      operationId: getSessionDataUsingPOST_1
      parameters:
      - name: sessionId
        in: query
        description: sessionId
        required: true
        schema:
          type: string
      requestBody:
        description: The request params object, with json object, with the 'id' filed
          filled in with the id of the storeEntry to retrieve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestParameters'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: requestParameters
  /sm/new/search:
    post:
      tags:
      - new-api-rest
      summary: returns in the extraData field the array of JSON objects matching the
        given type, or if no type is given all session objects
      operationId: searchDataUsingPOST
      parameters:
      - name: sessionId
        in: query
        description: sessionId
        required: true
        schema:
          type: string
      requestBody:
        description: The request params object, with json object, with the 'type'
          field filled in with the type of storeEntry objects to retrieve
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestParameters'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: requestParameters
  /sm/new/startSession:
    post:
      tags:
      - new-api-rest
      summary: Starts a new session, by setting the code to NEW and the identifier
        at sessionData.sessionId
      operationId: startSessionUsingPOST_1
      requestBody:
        description: The request params object, with json object, with the 'sessionId'
          field filled in with the sessionID related to this session dataStore
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/requestParameters'
        required: false
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
        201:
          description: Created
          content: {}
        401:
          description: Unauthorized
          content: {}
        403:
          description: Forbidden
          content: {}
        404:
          description: Not Found
          content: {}
      deprecated: false
      x-codegen-request-body-name: requestParameters
  /metadata/microservices:
    get:
      tags:
      - ConfigManager
      summary: Get the configuration metadata for all microservices.
      description: Get ...
      operationId: allMicroservicesGet
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/msMetadataList'
  /metadata/microservices/{apiClass}:
    get:
      tags:
      - ConfigManager
      summary: Get the configuration metadata for all microservices of the specified
        api class.
      description: Get ...
      operationId: classMicroservicesGet
      parameters:
      - name: apiClass
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/msMetadataList'
        404:
          description: Bad microservice type or none found
          content: {}
  /metadata/externalEntities:
    get:
      tags:
      - ConfigManager
      summary: Get the list of available entity collections
      description: 'Collections like: IDP, SP, AP, GW'
      operationId: entityCollectionsGet
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: External entities not found
          content: {}
  /metadata/externalEntities/{collectionId}:
    get:
      tags:
      - ConfigManager
      summary: Get the list of entityMetadata objects for all the external entities
        belonging to a determined kind, set or collection.
      description: Get ...
      operationId: classEntitiesGet
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityMetadataList'
        404:
          description: Collection not found
          content: {}
  /metadata/externalEntities/{collectionId}/{entityId}:
    get:
      tags:
      - ConfigManager
      summary: Get the entityMetadata for the indicated external entity belonging
        to a determined set or kind.
      description: Get ...
      operationId: entityGet
      parameters:
      - name: collectionId
        in: path
        required: true
        schema:
          type: string
      - name: entityId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityMetadata'
        404:
          description: Collection not found
          content: {}
  /metadata/internal:
    get:
      tags:
      - ConfigManager
      summary: Get the list of available internal configurations
      description: The metadata collections delivered through this interface should
        be only for internal use, so only the registered muÂ¡icroservices should be
        allowed to query them
      operationId: internalConfsGet
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Internal configurations not found
          content: {}
  /metadata/internal/{confId}:
    get:
      tags:
      - ConfigManager
      summary: Get the configuration data for a given internal entity (the local GW,
        at the moment).
      description: Get ...
      operationId: configurationGet
      parameters:
      - name: confId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/entityMetadata'
        404:
          description: Internal configuration not found
          content: {}
  /metadata/attributes/:
    get:
      tags:
      - ConfigManager
      summary: 'Get the list of available attribute profiles: eIDAS, eduPerson, etc.'
      description: Get ...
      operationId: attributeProfilesGet
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        404:
          description: Attribute Profiles not found
          content: {}
  /metadata/attributes/{attrProfileId}:
    get:
      tags:
      - ConfigManager
      summary: Get the attribute set for the profile just specified.
      description: Get ...
      operationId: attributeSetGet
      parameters:
      - name: attrProfileId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeTypeList'
        404:
          description: Attribute Profile not found
          content: {}
  /metadata/attributes/{attrProfileId}/maps:
    get:
      tags:
      - ConfigManager
      summary: Get the list of mappings of attributes with other sets, for the profile
        just specified.
      description: Get ...
      parameters:
      - name: attrProfileId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/attributeMapList'
        404:
          description: Attribute Profile not found
          content: {}
  /cl/list/{collection}:
    get:
      tags:
      - APIGatewayClient
      summary: Get a collection of elements to be displayed on the selector widget.
      description: _
      parameters:
      - name: collection
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/displayableList'
        404:
          description: Collection not found
          content: {}
  /cl/session/start:
    get:
      tags:
      - APIGatewayClient
      summary: Start a session on the server, receive the session token for later
        reference. SessionId to be returned on the payload
      description: _
      parameters:
      - name: sessionID
        in: query
        schema:
          type: string
      responses:
        200:
          description: Session started
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Session start error
          content: {}
  /cl/session/end:
    get:
      tags:
      - APIGatewayClient
      summary: End a session on the server, receive the session token for later reference.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Session ended
          content: {}
        404:
          description: Session end error
          content: {}
  /cl/auth/{moduleID}/login:
    get:
      tags:
      - APIGatewayClient
      summary: Login through a specifc auth method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/auth/{moduleID}/logout:
    get:
      tags:
      - APIGatewayClient
      summary: Logout through a specifc auth method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/auth/logout:
    get:
      tags:
      - APIGatewayClient
      summary: Logout from all logged-in modules (chain logout calls for all modules).
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/persistence/{moduleID}/load:
    get:
      tags:
      - APIGatewayClient
      summary: Load store with a specific persistence method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/persistence/{moduleID}/store:
    get:
      tags:
      - APIGatewayClient
      summary: Save user data on a store with a specific auth method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/source/{moduleID}/retrieve:
    get:
      tags:
      - APIGatewayClient
      summary: Fetch user identity data on the session store with a specific identity
        method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/source/{moduleID}/load:
    post:
      tags:
      - APIGatewayClient
      summary: Load an identity dataset retrieved on a client-side module. Notice
        that in this case the client must be trusted, so be careful when integrating
        sources with this api.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        description: The data set to add
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataSet'
        required: true
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
      x-codegen-request-body-name: dataset
  /cl/ident/derivation/{moduleID}/generate:
    get:
      tags:
      - APIGatewayClient
      summary: Generate a derived identity through a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/mgr/list:
    get:
      tags:
      - APIGatewayClient
      summary: Get the list of user identity data sets currently    loaded or fetched
        in session.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataStore'
        404:
          description: Collection not found
          content: {}
  /cl/ident/mgr/{datasetID}/refresh:
    get:
      tags:
      - APIGatewayClient
      summary: Update a retrieved or derived identity already on the session store
        through the specific method module used to obtain it.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: datasetID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/mgr/{datasetID}/delete:
    get:
      tags:
      - APIGatewayClient
      summary: Delete a retrieved or derived identity already on the session store
        through the specific method module used to obtain it.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: datasetID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/mgr/{datasetID}/revoke:
    get:
      tags:
      - APIGatewayClient
      summary: Revoke a retrieved or derived identity already on the session store
        through the specific method module used to obtain it.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: datasetID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/request:
    post:
      tags:
      - APIGatewayClient
      summary: Request two data sets to be reconciled through a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - datasetIDa
              - datasetIDb
              properties:
                datasetIDa:
                  type: string
                datasetIDb:
                  type: string
        required: true
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/{requestId}/status:
    get:
      tags:
      - APIGatewayClient
      summary: Request the status of a reconciliation request to a specific method
        module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/{requestId}/cancel:
    get:
      tags:
      - APIGatewayClient
      summary: Request to cancel a reconciliation request on a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/{requestId}/result:
    get:
      tags:
      - APIGatewayClient
      summary: Fetch the result of a reconciliation request to a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/{requestId}/files/upload:
    post:
      tags:
      - APIGatewayClient
      summary: Upload a supporting file to a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: uploaded file (string with a json in form of the commented
                    definition)
        required: true
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/{requestId}/messages/send:
    post:
      tags:
      - APIGatewayClient
      summary: Send a message to a validation officer on a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - message
              properties:
                message:
                  type: string
        required: true
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/ident/linking/{moduleID}/{requestId}/messages/receive:
    get:
      tags:
      - APIGatewayClient
      summary: Receive messages from a validation officer on a specific method module
        (on the response payload as a conversation object).
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/vc/issuing/{moduleID}/generate/{VCDefinition}:
    get:
      tags:
      - APIGatewayClient
      summary: Generate a verifiable claim through a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: VCDefinition
        in: path
        description: As VCs will have a predefined form, we select the type somewhere
          else and just pass the type to the module that will know how to build it
          (and which data sources are needed)
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /cl/callback:
    get:
      tags:
      - APIGatewayClient
      summary: Set in Session the Return page in the client when invoking modules.
        This URL under the control of the client will allow it to retake control of
        the flow. ** Client must expect a msToken on the callback url **
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: ClientCallbackAddr
        in: query
        description: the actual callback url the modules will call when returning
          control to the client
        required: true
        schema:
          type: string
      responses:
        200:
          description: Callback registered
          content: {}
        404:
          description: Error registering callback
          content: {}
  /cl/token/validate:
    get:
      tags:
      - APIGatewayClient
      summary: Now the callback address is on the client domain, the client will need
        some endpoint to validate the msToken the module will send along when calling
        the callback, to secure the app flow. The client will send the msToken to
        the api gw for validation through this call.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: msToken
        in: query
        description: B64 string with the received msToken
        required: true
        schema:
          type: string
      responses:
        200:
          description: Result of the Token validation, sessionID and additional data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SessionMngrResponse'
  /spcl/list/{collection}:
    get:
      tags:
      - APIGatewaySP
      summary: Get a collection of elements to be displayed on the selector widget.
      description: _
      parameters:
      - name: collection
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/displayableList'
        404:
          description: Collection not found
          content: {}
  /spcl/session/start:
    get:
      tags:
      - APIGatewaySP
      summary: Start a session on the server, receive the session token for later
        reference.
      description: _
      parameters:
      - name: sessionID
        in: query
        schema:
          type: string
      responses:
        200:
          description: Session started
          content: {}
        404:
          description: Session start error
          content: {}
  /spcl/session/end:
    get:
      tags:
      - APIGatewaySP
      summary: End a session on the server, receive the session token for later reference.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Session ended
          content: {}
        404:
          description: Session end error
          content: {}
  /spcl/auth/{moduleID}/login:
    get:
      tags:
      - APIGatewaySP
      summary: Login through a specifc auth method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /spcl/persistence/{moduleID}/load:
    get:
      tags:
      - APIGatewaySP
      summary: Load store with a specific persistence method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /spcl/ident/mgr/return/{moduleID}:
    get:
      tags:
      - APIGatewaySP
      summary: Retrieve the response token for the SP, to redirect back to the SP
        specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /rm/request:
    post:
      tags:
      - RequestManager
      summary: Pass a standard request object to be handled.
      description: Process an Authn or Data request
      parameters:
      - in: cookie
        name: spRequest
        schema:
          $ref: "#/components/schemas/attributeSet"
        description: The standard request object representing the request the remote SP made
        required: true
      - in: cookie
        name: spMetadata
        schema:
          $ref: "#/components/schemas/entityMetadata"
        description: The metadata object of the remote SP that issued the request to the gateway
        required: true
      - in: cookie
        name: apEntityId
        schema:
         type: string
        description: The id of the remote AP to query (this way, the acm will skip discovery UI)
        required: false
      - in: cookie
        name: authenticationSet
        schema:
          $ref: "#/components/schemas/attributeSet"
        description: A standard response object containing a some of the attributes and values retrieved from the IDP on the originating GW, so they can be passed to the AP for authentication (in this case, the destination GW trusts the authentication at the originating GW).
        required: false
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
                - msToken

              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls


      responses:
        200:
          description: Request admitted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Request not authorised
          content: {}
  /rm/response:
    post:
      tags:
      - RequestManager
      summary: Callback. Pass a standard response object to be handled.
      description: Process an Authn or Data response
      parameters:
      - in: cookie
        name: dsResponse
        schema:
          $ref: "#/components/schemas/attributeSet"
        description: The standard response object representing the response the remote IdP/AP issued
        required: true
      - in: cookie
        name: dsMetadata
        schema:
          $ref: "#/components/schemas/entityMetadata"
        description: The metadata object of the remote IdP/AP that issued the response to the gateway
        required: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Response admitted
          content: {}
        400:
          description: Bad response
          content: {}
        401:
          description: Not authorised
          content: {}
  /sp/response:
    post:
      tags:
      - SPService
      summary: Callback. Pass a standard response object to be handled.
      description: Process an Authn or Data response from the RequestManager to send
        it back to the remote SP
      parameters:
      - in: cookie
        name: responseAssertions
        schema:
          $ref: "#/components/schemas/attributeSetList"
        description: The standard response object(s) representing the response(s) the remote IdP and/or AP(s) issued
        required: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Response admitted
          content: {}
        400:
          description: Bad response
          content: {}
        401:
          description: Not authorised
          content: {}
  /as/authenticate:
    post:
      tags:
      - AuthenticationSource
      summary: Pass a standard authn request object to be handled by an auth source
        ms.
      description: Process an Authn request
      parameters:
      - in: cookie
        name: idpRequest
        schema:
          $ref: "#/components/schemas/attributeSet"
        description: The standard request object representing the request to be issued to the auth source
        required: true
      - in: cookie
        name: idpMetadata
        schema:
          $ref: "#/components/schemas/entityMetadata"
        description: The metadata object of the remote IDP that must be queried
        required: true
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Request admitted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Request not authorised
          content: {}
  /is/query:
    post:
      tags:
      - IdentitySource
      summary: Pass a data query request object to be handled by an identity module
        ms.
      description: Process a Data request
      parameters:
      - in: cookie
        name: apRequest
        schema:
          $ref: "#/components/schemas/attributeSet"
        description: The standard request object representing the request to be issued to the identity source
        required: true
      - in: cookie
        name: apMetadata
        schema:
          $ref: "#/components/schemas/entityMetadata"
        description: The metadata object of the remote AP that must be queried
        required: true
      - in: cookie
        name: authenticationSet
        schema:
          $ref: "#/components/schemas/attributeSet"
        description: A standard response object containing the attributes retreved from the user authentication on SEAL, if any (for now, just ignore).
        required: false
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Request admitted
          content: {}
        400:
          description: Bad request
          content: {}
        401:
          description: Request not authorised
          content: {}
  /is/load:
    post:
      tags:
      - IdentitySource
      summary: Passively provide trusted identity data from a trusted source to the
        identity source module. Can be used to implement a callback interface
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Identity Dataset received
          content: {}
        404:
          description: Error receiving identity dataset
          content: {}
  /per/load:
    post:
      tags:
      - Persistence
      summary: Setup a persistence mechanism and load a secure storage into session.
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Persistence storage loaded
          content: {}
        404:
          description: Error loading persistence storage
          content: {}
  /per/store:
    post:
      tags:
      - Persistence
      summary: Save session data to the configured persistence mechanism (front channel).
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls.
        required: true
      responses:
        200:
          description: Persistence storage saved
          content: {}
        404:
          description: Error saving persistence storage
          content: {}
  /per/load/{sessionToken}:
    post:
      tags:
      - Persistence
      summary: Silent setup of a persistence mechanism by loading a user-provided
        secure storage into session. (back channel).
      description: _
      parameters:
      - name: sessionToken
        in: path
        description: The session token
        required: true
        schema:
          type: string
      - name: cipherPassword
        in: query
        description: The password that needs to be used to decrypt the blob, if encrypted
        schema:
          type: string
      requestBody:
        description: The data store to load
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/dataStore'
        required: true
      responses:
        200:
          description: Persistence storage loaded
          content: {}
        404:
          description: Error loading persistence storage
          content: {}
      x-codegen-request-body-name: dataStore
  /per/store/{sessionToken}:
    get:
      tags:
      - Persistence
      summary: Save session data to the configured persistence mechanism (back channel).
        Might return the signed and possibly encrypted datastore
      description: _
      parameters:
      - name: sessionToken
        in: path
        description: The session token
        required: true
        schema:
          type: string
      - name: cipherPassword
        in: query
        description: The password to encrypt the blob
        schema:
          type: string
      responses:
        200:
          description: Persistence storage saved
          content: {}
        201:
          description: Persistence storage attached
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataStore'
        404:
          description: Error saving persistence storage
          content: {}
  /idboot/generate:
    post:
      tags:
      - IDBootstrapping
      summary: Generate a new identity in session and link it to the authenticated
        identity.
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Identity generated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataSet'
        404:
          description: Error bootstrapping identity
          content: {}
  /idboot/update/{datasetId}:
    post:
      tags:
      - IDBootstrapping
      summary: Refresh a derived identity in session (if persistent identity, this
        can be idle).
      description: _
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Identity refreshed
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/dataSet'
        404:
          description: Error refreshing identity
          content: {}
  /idboot/update/{datasetId}/credentials:
    post:
      tags:
      - IDBootstrapping
      summary: Refresh the associated authentication credentials (if any) of a derived
        identity in session (if no credentials, this can be idle). Do not confuse
        with VCs
      description: _
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Credetials refreshed
          content: {}
        404:
          description: Error refreshing credentials
          content: {}
  /idboot/delete/{datasetId}:
    post:
      tags:
      - IDBootstrapping
      summary: Delete a derived identity in session.
      description: _
      parameters:
      - name: datasetId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Identity deleted
          content: {}
        404:
          description: Error deleting identity
          content: {}
  /idboot/revoke:
    post:
      tags:
      - IDBootstrapping
      summary: Revoke a derived identity in session.
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - datasetId
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
                datasetId:
                  type: string
        required: true
      responses:
        200:
          description: Identity revoked
          content: {}
        404:
          description: Error revoking identity
          content: {}
  /link/request/submit:
    post:
      tags:
      - IDLinking
      summary: Start a link request.
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Request submitted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkRequest'
        404:
          description: Error sending message
          content: {}
  /link/{requestId}/status:
    get:
      tags:
      - IDLinking
      summary: Check the status of a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Incoming status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/statusResponse'
        404:
          description: Error requesting status
          content: {}
  /link/{requestId}/cancel:
    post:
      tags:
      - IDLinking
      summary: Cancel a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Request canceled
          content: {}
        404:
          description: Error cancelling request
          content: {}
  /link/{requestId}/files/upload:
    post:
      tags:
      - IDLinking
      summary: Upload a file to a request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - file
              properties:
                file:
                  type: string
                  description: the JSON object containing the uploaded file (a string
                    with the definition in the comment)
        required: true
      responses:
        200:
          description: File uploaded
          content: {}
        404:
          description: Error uploading file
          content: {}
  /link/{requestId}/messages/send/{recipient}:
    post:
      tags:
      - IDLinking
      summary: Send a message to a validation officer or requester in the context
        of a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: recipient
        in: path
        required: true
        schema:
          type: string
          enum:
          - officer
          - requester
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - message
              properties:
                message:
                  type: string
        required: true
      responses:
        200:
          description: Message sent
          content: {}
        404:
          description: Error sending message
          content: {}
  /link/{requestId}/messages/receive:
    get:
      tags:
      - IDLinking
      summary: Receive messages from a conversation in the context of a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Incoming messages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/conversation'
        404:
          description: Error fetching messages
          content: {}
  /link/{requestId}/result/get:
    post:
      tags:
      - IDLinking
      summary: Receive resolution of a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: Incoming result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkRequest'
        403:
          description: Link was rejected
          content: {}
        404:
          description: Error fetching result
          content: {}
  /link/{requestId}/lock:
    get:
      tags:
      - IDLinking
      summary: Reserve exclusive access to a link request. Should have a timeout by
        default
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Request locked
          content: {}
        404:
          description: Error fetching messages
          content: {}
  /link/{requestId}/unlock:
    get:
      tags:
      - IDLinking
      summary: Release exclusive access to a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Request unlocked
          content: {}
        404:
          description: Error fetching messages
          content: {}
  /link/{requestId}/get:
    get:
      tags:
      - IDLinking
      summary: Get a link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Incoming request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkRequest'
        404:
          description: Error getting request
          content: {}
  /link/list:
    get:
      tags:
      - IDLinking
      summary: Receive a list of link request that can be treated by the user.
      description: _
      parameters:
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Incoming request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkRequestList'
        404:
          description: Error fetching messages
          content: {}
  /link/{requestId}/approve:
    get:
      tags:
      - IDLinking
      summary: Approve a locked link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Request Approved
          content: {}
        404:
          description: Error approving request
          content: {}
  /link/{requestId}/reject:
    get:
      tags:
      - IDLinking
      summary: Reject a locked link request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Request Rejected
          content: {}
        404:
          description: Error rejecting request
          content: {}
  /link/{requestId}/files/download/list:
    get:
      tags:
      - IDLinking
      summary: Download the list of files attached to a request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Incoming File list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileList'
        404:
          description: Error getting request file list
          content: {}
  /link/{requestId}/files/download/{fileID}:
    get:
      tags:
      - IDLinking
      summary: Download the list of files attached to a request.
      description: _
      parameters:
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: fileID
        in: path
        required: true
        schema:
          type: string
      - name: sessionToken
        in: query
        description: if the module requires some kind of authorisation and officer
          identification
        schema:
          type: string
      responses:
        200:
          description: Incoming File
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileObject'
        404:
          description: Error getting request
          content: {}
  /linkapp/list/{collection}:
    get:
      tags:
      - APIGatewayLink
      summary: Get a collection of elements to be displayed on the selector widget.
      description: _
      parameters:
      - name: collection
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/displayableList'
        404:
          description: Collection not found
          content: {}
  /linkapp/session/start:
    get:
      tags:
      - APIGatewayLink
      summary: Start a session on the server, receive the session token for later
        reference.
      description: _
      parameters:
      - name: sessionID
        in: query
        schema:
          type: string
      responses:
        200:
          description: Session started
          content: {}
        404:
          description: Session start error
          content: {}
  /linkapp/session/end:
    get:
      tags:
      - APIGatewayLink
      summary: End a session on the server, receive the session token for later reference.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Session ended
          content: {}
        404:
          description: Session end error
          content: {}
  /linkapp/auth/{moduleID}/login:
    get:
      tags:
      - APIGatewayLink
      summary: Login through a specifc auth method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /linkapp/auth/logout:
    get:
      tags:
      - APIGatewayLink
      summary: Logout on the used auth method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /linkapp/modules/list:
    get:
      tags:
      - APIGatewayLink
      summary: Get a list of pending link requests that can be handled, from all modules
        by the authenticated official.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/displayableList'
        404:
          description: Collection not found
          content: {}
  /linkapp/requests/{moduleID}/list:
    get:
      tags:
      - APIGatewayLink
      summary: Get a list of pending link requests that can be handled by the authenticated
        official on a specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/displayableList'
        404:
          description: Collection not found
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/lock:
    get:
      tags:
      - APIGatewayLink
      summary: Lock a pending link request to prevent other officials from handling
        it, on a specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request locked
          content: {}
        403:
          description: Requets already locked
          content: {}
        404:
          description: Error locking request
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/unlock:
    get:
      tags:
      - APIGatewayLink
      summary: Release a locked a pending link request so other officials can handle
        it, on a specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request unlocked
          content: {}
        403:
          description: Request already unlocked
          content: {}
        404:
          description: Error locking request
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/get:
    get:
      tags:
      - APIGatewayLink
      summary: Get a pending link request from a specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/linkRequest'
        404:
          description: Error getting request
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/approve:
    get:
      tags:
      - APIGatewayLink
      summary: Approve a pending link request from a specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request approved
          content: {}
        404:
          description: Error approving request
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/reject:
    get:
      tags:
      - APIGatewayLink
      summary: Approve a pending link request from a specific module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Request rejected
          content: {}
        404:
          description: Error rejecting request
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/files/download/list:
    get:
      tags:
      - APIGatewayLink
      summary: Get the list of files uploaded for a given request in a module
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming File list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileList'
        404:
          description: Error getting request file list
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/files/download/{fileID}:
    get:
      tags:
      - APIGatewayLink
      summary: Get a file for a given request in a module
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      - name: fileID
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Incoming File
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/fileObject'
        404:
          description: Error getting request
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/messages/send:
    post:
      tags:
      - APIGatewayLink
      summary: Send a message to a requester on a specific method module.
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - message
              properties:
                message:
                  type: string
        required: true
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /linkapp/requests/{moduleID}/{requestId}/messages/receive:
    get:
      tags:
      - APIGatewayLink
      summary: Receive messages from a requester on a specific method module (on the
        response payload as a conversation object).
      description: _
      parameters:
      - name: sessionID
        in: query
        required: true
        schema:
          type: string
      - name: moduleID
        in: path
        required: true
        schema:
          type: string
      - name: requestId
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Module access trigger
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/moduleTrigger'
        404:
          description: Error accessing module
          content: {}
  /vc/issue/{VCDefinition}:
    post:
      tags:
      - VerifiableClaimIssuing
      summary: Produce a verifiable claim of the indicated type
      description: _
      parameters:
      - name: VCDefinition
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: VC issued and stored in wallet
          content: {}
        404:
          description: Error generating VC
          content: {}
  /vc/didAuth:
    post:
      tags:
      - VerifiableClaimIssuing
      summary: Challenge a wallet to be recognised as the owner of some DID
      description: _
      requestBody:
        content:
          application/x-www-form-urlencoded:
            schema:
              required:
              - msToken
              properties:
                msToken:
                  type: string
                  description: The security token for ms to ms calls
        required: true
      responses:
        200:
          description: DID authentication successful
          content: {}
        403:
          description: DID authentication failed
          content: {}
        404:
          description: Error doing DID authentication
          content: {}
  /revoked/list/set:
    post:
      tags:
      - Revocation
      summary: Submit a list of revoked data set or verifiable claim IDs.
      description: _
      requestBody:
        description: List of revoked data sets or VCs
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/revocationList'
        required: true
      responses:
        200:
          description: Revocation list set
          content: {}
        404:
          description: Error setting revocation list
          content: {}
      x-codegen-request-body-name: revocationList
  /revoked/list/get:
    get:
      tags:
      - Revocation
      summary: Fetch a list of revoked data set or verifiable claim IDs.
      description: _
      responses:
        200:
          description: Revocation list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/revocationList'
        404:
          description: Error getting revocation list
          content: {}
  /revoked/{datasetID}/:
    get:
      tags:
      - Revocation
      summary: Check if a data set or verifiable claim is revoked.
      description: _
      parameters:
      - name: datasetID
        in: path
        description: data set id to check
        required: true
        schema:
          type: string
      responses:
        200:
          description: Valid
          content: {}
        403:
          description: Revoked
          content: {}
        404:
          description: Error checking revocation
          content: {}
components:
  schemas:
    MngrSessionTO:
      title: MngrSessionTO
      required:
      - sessionId
      type: object
      properties:
        sessionId:
          type: string
        sessionVariables:
          type: object
          properties: {}
    SessionMngrResponse:
      title: SessionMngrResponse
      type: object
      properties:
        additionalData:
          type: string
        code:
          type: string
          enum:
          - OK
          - ERROR
          - NEW
        error:
          type: string
        sessionData:
          $ref: '#/components/schemas/MngrSessionTO'
    UpdateDataRequest:
      title: UpdateDataRequest
      type: object
      properties:
        dataObject:
          type: string
        sessionId:
          type: string
        variableName:
          type: string
    NewUpdateDataRequest:
      title: NewUpdateDataRequest
      type: object
      properties:
        data:
          type: string
        id:
          type: string
        sessionId:
          type: string
        type:
          type: string
    View:
      title: View
      type: object
      properties:
        contentType:
          type: string
    requestParameters:
      title: requestParameters
      type: object
      properties:
        data:
          type: string
        id:
          type: string
        sessionId:
          type: string
        type:
          type: string
    msMetadata:
      type: object
      properties:
        msId:
          type: string
          description: A unique readable name for a microservice.
        authorisedMicroservices:
          type: array
          description: List of ms identifiers that will be authorised to contact this
            microservice (will be used by the SM when validating a token).
          items:
            type: string
        rsaPublicKeyBinary:
          type: string
          description: Public key of the microservice in B64. The ms will keep their
            own private key.
        publishedAPI:
          type: array
          description: List of the interfaces api endpoints implememnted by this ms
            (this will determine which types does the ms belong to)
          items:
            $ref: '#/components/schemas/publishedApiType'
      description: Specification of a given microservice.
    publishedApiType:
      type: object
      properties:
        apiClass:
          $ref: '#/components/schemas/apiClassEnum'
        apiCall:
          type: string
        apiConnectionType:
          $ref: '#/components/schemas/apiConnectionType'
        apiEndpoint:
          type: string
      description: Endpoint descriptor, where requests can be made
    apiConnectionType:
      type: string
      enum:
      - post
      - get
    msMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/msMetadata'
    apiClassEnum:
      type: string
      enum:
      - APIGW
    entityMetadata:
      required:
      - entityId
      type: object
      properties:
        entityId:
          type: string
          description: Unique identifier of the entity, usually a metadata url
          example: https://esmo.uji.es/gw/saml/idp/metadata.xml
        defaultDisplayName:
          type: string
          description: Name to be displayed on UI, in the default language/encoding
          example: UJI Identity Provider
        displayNames:
          type: object
          additionalProperties:
            type: string
          description: list of alternative display names, by language or encoding
          example:
            ES: UJI Proveedor de Identidad
            EN: UJI Identity Provider
        logo:
          type: string
          description: B64 string with an image binary to be displayed at UI
          example: AWDGRsFbFDEfFGTNNJKKYGFVFfDDSSSDCCC==
        location:
          type: array
          description: unspecified list of information items about the physical or
            political location of the entity, to facilitate discovery
          items:
            type: string
        protocol:
          type: string
          description: Which protocol does this entity support (SAML, OIDC, etc.)
        microservice:
          type: array
          description: list of identifiers of microservice able to handle this external
            entity
          items:
            type: string
        claims:
          type: array
          description: list of attributes supported/requested by default by this entity
          example:
          - displayName
          - surname
          - dateOfBirth
          - eduPersonAffiliation
          items:
            type: string
        endpoints:
          type: array
          description: List of service endpoints, where this Entity will accept requests/responses.
          items:
            $ref: '#/components/schemas/endpointType'
        securityKeys:
          type: array
          description: List of keys held by this entity
          items:
            $ref: '#/components/schemas/securityKeyType'
        encryptResponses:
          type: boolean
          description: whether this entity will issue/expect encrypted responses
          example: false
        supportedEncryptionAlg:
          type: array
          description: list of supported encryption algorithms
          example:
          - AES256
          - AES512
          items:
            type: string
        signResponses:
          type: boolean
          description: whether this entity will issue/expect signed responses
          example: true
        supportedSigningAlg:
          type: array
          description: list of supported signing algorithms
          example:
          - RSA-SHA256
          items:
            type: string
        otherData:
          type: object
          properties: {}
          description: Dictionary of additional fields, specific for a certain entity
            type or protocol
          example:
          - attributeMappingToEIDAS:
              displayName: CurrentGivenName
              surname: CurrentFamilyName
      description: Information about the an external entity
    entityMetadataList:
      type: array
      items:
        $ref: '#/components/schemas/entityMetadata'
    endpointType:
      type: object
      properties:
        type:
          type: string
          description: String identifying the kind of endpoint (depends on each protocol)
          example: SSOService
        method:
          type: string
          description: String identifying the method to access the endpoint (depends
            on each protocol, i.e. HTTP-POST).
          example: HTTP-POST
        url:
          type: string
          description: Access url of the endpoint
          example: https://esmo.uji.es/gw/saml/idp/SSOService.php
      description: Endpoint descriptor, where requests can be made or responses sent.
    securityKeyType:
      type: object
      properties:
        keyType:
          type: string
          description: String identifying the kind of key
          example: RSAPublicKey
        usage:
          type: string
          description: To which use is this key intended.
          example: signing
          enum:
          - signing
          - encryption
        key:
          type: string
          description: B64 string representing the key binary
          example: MDAACaFgw...xFgy=
      description: Descriptor of a key or certificate.
    attributeType:
      type: object
      properties:
        name:
          type: string
          description: Unique class identifier of the attribute
          example: http://eidas.europa.eu/attributes/naturalperson/CurrentGivenName
        friendlyName:
          type: string
          description: Class identifier of the attribute (short version, might have
            collisions)
          example: CurrentGivenName
        encoding:
          type: string
          description: String identifying the encoding method:"UTF-8" , "BASE64",
            etc.
          example: plain
        language:
          type: string
          description: String identifying the language code of the value contents
          example: ES_es
        mandatory:
          type: boolean
          description: To mark the mandatoriness of the attribute.
          example: true
        values:
          type: array
          description: List of values for the attribute
          example:
          - JOHN
          items:
            type: string
      description: Contents of an attribute item.
    attributeTypeList:
      type: array
      items:
        $ref: '#/components/schemas/attributeType'
    attributeSet:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the set
          example: 6c0f70a8-f32b-4535-b5f6-0d596c52813a
        type:
          type: string
          description: Kind of set
          example: Response
          enum:
          - Request
          - Response
          - AuthResponse
        issuer:
          type: string
          description: ID of the External Entity which issued the set
          example: https://esmo.uji.es/gw/saml/idp/metadata.xml
        recipient:
          type: string
          description: ID of the External Entity which the set is addressed to
          example: https://esmo.uji.es/gw/saml/sp/metadata.xml
        inResponseTo:
          type: string
          description: In response objects, the ID of the request which the set is
            responding to
          example: aaaa70a8-f32b-4535-b5f6-0d596cbbbbb
        loa:
          type: string
          description: Level of trust of the authentication related to the set, if
            it is a response for an eIDAS authentication request
          example: http://eidas.europa.eu/LoA/substantial
        notBefore:
          type: string
          description: Minimum validity date of the set
          example: 2018-12-06T19:40:16Z
        notAfter:
          type: string
          description: Maximum validity date of the set
          example: 2018-12-06T19:45:16Z
        status:
          $ref: '#/components/schemas/attributeSetStatus'
        attributes:
          type: array
          description: The list of the attributes or claims related to the user, contained
            on the set
          items:
            $ref: '#/components/schemas/attributeType'
        properties:
          type: object
          additionalProperties:
            type: string
          description: Dictionary of additional fields of data related to the attributes
            in the set(strings only), specific for a certain entity type or protocol.
            List of useful metadata related to the attributes and any specific information
            that came with the remote SP/RP request (or was filled in with metadata
            stored presets for said SP/RP) and might be of need for some implementation
            of the local SP to issue the authentication request.
      description: Object representing a generic request/response. Used for in-application
        transference of the security assertions or claims containing trusted user
        information (attribute values); also to set the list of attributes to be requested.
    attributeSetStatus:
      type: object
      properties:
        code:
          type: string
          description: main standard status code from a closed list.
          enum:
          - OK
          - ERROR
        subcode:
          type: string
          description: free text field to represent status codes, open for specific
            applications or fluxes.
        message:
          type: string
          description: a free text string to provide human-readable status-error information
    attributeSetList:
      type: array
      items:
        $ref: '#/components/schemas/attributeSet'
    attributeMap:
      type: object
      properties:
        description:
          type: string
          description: Name or explain the mapping
        pairings:
          type: array
          description: A list of groups that are semantically equivalent
          items:
            type: object
            properties:
              profile:
                type: string
                description: Attribute profile which this group belongs to
                example: eIDAS
              issuer:
                type: string
                description: ID of the entity that emmitted the attributes on this
                  group. If specified, this equivalence will only apply to attributes
                  coming from the correspondign issuer
                example: http://clave.redsara.es/
              attributes:
                type: array
                description: Array of attribute names (can be a single one) and/or
                  string literals that will concatenate to form the group. Items starting
                  with $ will be considered as attribute names, and will be substitutied
                  by its value. Literal strings starting with $ must escape it "\$"
                example:
                - $surname1
                - '#'
                - $surname2
                items:
                  type: string
              regexp:
                type: string
                description: If set, the result of the concatenation will be matched
                  towards this PERL compatible regexp (no match will return an empty
                  string). Can be used to transform or to ensure a given format.
                example: ^(-,a-zA-Z)+#(-,a-zA-Z)+$
              replace:
                type: string
                description: If set, this is what will be returned after matching
                  the regexp. Sub-match numeric placeholders can be used as in a PERL
                  compatible regexp.
                example: \1 \2
      description: Represent semantic equivalence relationships between attribute
        groups. Groups can be either single attributes or formed by regexp transformation
        (match and replace) of the result of concatenation of attributes and literal
        strings.
    attributeMapList:
      type: array
      items:
        $ref: '#/components/schemas/attributeMap'
    moduleTrigger:
      type: object
      properties:
        payload:
          type: object
          properties: {}
          description: Response data. Any object format
        status:
          type: object
          properties:
            message:
              type: string
            mainCode:
              type: string
            secondaryCode:
              type: string
          description: Status of the response
        access:
          type: object
          properties:
            binding:
              type: string
              description: Mechanism to access the delegated resource
              enum:
              - HTTP-POST-REDIRECT
              - HTTP-GET-REDIRECT
              - HTTP-GET
              - HTTP-POST
              - HTTP-GET-SIG
              - HTTP-POST-SIG
              - LOC-FUNC-CALL
              - LOCAL-PROT-HANDLER
            target:
              type: string
              description: the location to access the resource (URL, callback function,
                etc.)
            contentType:
              type: string
              description: the MIME type of the body, if any
            bodyContent:
              type: string
              description: If the access method requires to transfer data on the body
                of the request, it will be written here
          description: If the response commands the client to access elsewhere, this
            field will tell where and how
      description: Response object of the API GW. Returns data, status and commands
        how to deal the loading of a specific module
    dataSet:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the set
          example: 6c0f70a8-f32b-4535-b5f6-0d596c52813a
        type:
          type: string
          description: To define different kinds of datasets, to establish classifications
        categories:
          type: array
          description: To define multiple classes where the data set can be grouped.
          items:
            type: string
        issuerId:
          type: string
          description: Name of the attribute that is the ID of the entity that issued
            the data set, a kind of pointer to the property ID.
        subjectId:
          type: string
          description: Name of the attribute that is the ID of the data owner, a kind
            of pointer to the attribute ID.
        loa:
          type: string
          description: Level of assurance of the authenticity of the data/authentication
        issued:
          type: string
          description: Date when the data set was retrieved from its source
          example: 2018-12-06T19:40:16Z
        expiration:
          type: string
          description: Maximum validity date of the set (empty means permanent)
          example: 2018-12-06T19:45:16Z
        attributes:
          type: array
          description: The list of the identity attributes or claims contained on
            the set
          items:
            $ref: '#/components/schemas/attributeType'
        properties:
          type: object
          additionalProperties:
            type: string
          description: Dictionary of additional fields of data related to the attributes
            in the set(strings only) for any specific purpose.
      description: Object representing a generic identity data set, retrieved from
        some source and stored on a user store.
    dataStore:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the set
          example: 6c0f70a8-f32b-4535-b5f6-0d596c52813a
        encryptedData:
          type: string
          description: If the data store is encrypted, this will be set. B64 string
        signature:
          type: string
          description: If the data store is signed, signature goes here. B64 string.
            Sign always the decrypted dataset.
        signatureAlgorithm:
          type: string
          description: Descriptor of the signature algorithm used.
        encryptionAlgorithm:
          type: string
          description: Descriptor of the encryption algorithm used.
        clearData:
          type: array
          description: If the data store is in cleartext, this will be set
          items:
            $ref: '#/components/schemas/storeEntry'
      description: Represents a clear, encrypted and/or signed data set.
    storeEntry:
      type: object
      properties:
        id:
          type: string
          description: A unique and persistent identifier for the object, for a given
            source, issuer and subject
          example: eidas-es-0d596c52813a
        type:
          type: string
          description: The classname of the contained object
          example: linkRequest
        data:
          type: object
          properties: {}
          description: The object to be stored. Any object, but mainly dataSet and
            linkRequest
      description: Wrapper object to allow multiple kinds of objects stored on the
        dataStore.
    storeEntryList:
      type: array
      items:
        $ref: '#/components/schemas/storeEntry'
    fileObject:
      type: object
      properties:
        filename:
          type: string
        fileID:
          type: string
        contentType:
          type: string
          description: MIME type of the file content
        fileSize:
          type: integer
        content:
          pattern: ^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$
          type: string
          description: If not empty, the b64 encoded content of the file.
          format: byte
    fileList:
      type: array
      description: List of file metadata objects
      items:
        $ref: '#/components/schemas/fileObject'
    linkRequest:
      type: object
      properties:
        id:
          type: string
          description: Unique identifier of the set
          example: 6c0f70a8-f32b-4535-b5f6-0d596c52813a
        issuer:
          type: string
          description: Name of the entity that issued the link.
        type:
          type: string
          description: Type of set.
        lloa:
          type: string
          description: Level of certainty that both subjects are the same person
        issued:
          type: string
          description: Date when the link was certified (the date this data set was
            issued)
          example: 2018-12-06T19:40:16Z
        expiration:
          type: string
          description: Maximum validity date of the link (empty means permanent)
          example: 2018-12-06T19:45:16Z
        uri:
          type: string
          description: one-line URI representation of this link, once it has been
            issued
          example: urn:mace:project-seal.eu:link:project-seal.eu_automatedLink:low:GR%2FES%2F12345678A:eIDAS_ES:someone%40university.gr:EduGAIN_university.gr
        datasetA:
          $ref: '#/components/schemas/dataSet'
        datasetB:
          $ref: '#/components/schemas/dataSet'
        evidence:
          type: array
          description: List of additional files uploaded to the validator to check
            the person behind the identities
          items:
            $ref: '#/components/schemas/fileObject'
        conversation:
          type: array
          description: List of messages exchanged between the requester and the validation
            officer
          items:
            $ref: '#/components/schemas/message'
      description: Represents a linking request, as well as its resolution and the
        resulting linking dataset
    linkRequestList:
      type: array
      description: List of linking requests
      items:
        $ref: '#/components/schemas/linkRequest'
    message:
      type: object
      properties:
        timestamp:
          type: integer
          description: date and time when the message was sent
        sender:
          type: string
          description: Identifier of the user who sent the message
        senderType:
          type: string
          description: Identifier of the user category who sent the message
        recipient:
          type: string
          description: Identifier of the user whom the message is addressed to
        recipientType:
          type: string
          description: Identifier of the user category whom the message is addressed
            to
        message:
          type: string
          description: Content of the message
    conversation:
      type: array
      description: List of messages exchanged between two users
      items:
        $ref: '#/components/schemas/message'
    statusResponse:
      type: object
      properties:
        primaryCode:
          type: string
          description: generic status description object
          enum:
          - OK
          - ERROR
        secondaryCode:
          type: string
          description: Optional field for module specific status codes
        message:
          type: string
          description: Any message that might be of use to understand the status
      description: Generic Status response
    linkRequestStatus:
      type: string
      description: specific status codes of a link request (to be used on the secondaryCode
        field of statusResponse)
      enum:
      - PENDING
      - LOCKED
      - ACCEPTED
      - REJECTED
    revocationList:
      type: object
    displayableList:
      type: array
      items:
        type: object
        properties: {}
