swagger: '2.0' #Be aware of the version.
info:
  title: SEAL Service Microservice Specification
  version: 0.0.2
  description: "This document contains the formal specification of all standard module interfaces in SEAL Service. Take into account that parameters marked as cookie type, will instead be passed through the session object**
  "
  



  


tags:
    - name: "ConfigManager"
      description: ""
    - name: "SessionManager"
      description: ""
    - name: "APIGatewayClient"
      description: ""
    - name: "APIGatewaySP"
      description: ""
    - name: "RequestManager"
      description: ""
    - name: "SPService"
      description: ""
    - name: "AuthenticationSource"
      description: ""
    - name: "IdentitySource"
      description: ""
    - name: "Persistence"
      description: ""
    - name: "IDBootstrapping"
      description: ""
    - name: "IDLinking"
      description: ""
    - name: "APIGatewayLink"
      description: ""
    - name: "VerifiableClaimIssuing"
      description: ""
    - name: "Revocation"
      description: ""
      
      
      


paths:

####### SessionManager ########

  /sm/startSession:
    post:
      tags:
        - SessionManager
      summary: 'Sets up an internal session temporary storage and returns its identifierby setting the code to NEW and the identifier at sessionData.sessionId '
      operationId: startSessionUsingPOST
      consumes:
        - application/x-www-form-urlencoded
      produces:
        - application/json
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false


  /sm/endSession:
    delete:
      tags:
        - SessionManager
      summary: Terminates a session and deletes all the stored data by setting the code to OK
      operationId: endSessionUsingDELETE
      produces:
        - application/json
      parameters:
        - name: sessionId
          in: query
          description: sessionId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '204':
          description: No Content
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
      deprecated: false


  /sm/getSession:
    get:
      tags:
        - SessionManager
      summary: 'Returns the internal session identifier by querying using the UUID of an exteranal the session request. E.g. eIDAS request identifier, The identifier must be previously stored in the sessionResponds; code:OK, sessionData.sessionId: the internal sessionId that matches the request params'
      operationId: getSessionFromIdPUUUIDUsingGET
      produces:
        - application/json
      parameters:
        - name: varName
          in: query
          description: varName
          required: false
          type: string
        - name: varValue
          in: query
          description: varValue
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false


  /sm/getSessionData:
    get:
      tags:
        - SessionManager
      summary: 'A variable Or the whole session object  is retrieved. Responds by code:OK, sessionData:{sessionId: the session, sessioVarialbes: map of variables,values}'
      operationId: getSessionDataUsingGET
      produces:
        - application/json
      parameters:
        - name: sessionId
          in: query
          description: sessionId
          required: true
          type: string
        - name: variableName
          in: query
          description: variableName
          required: false
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false


  /sm/updateSessionData:
    post:
      tags:
        - SessionManager
      summary: 'Passed data is stored in a session variable overwriting the previous value. If no session variable is given, then the whole data stored in this session will be replaced with the passed dataObject, in that case the dataObject must be a dictionarycontaining paris of key, values e.g. {key1:value1, key2:value2} with keys and values strings (the latter may be json) Responds by setting code = OK " '
      operationId: updateSessionDataUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: updateRequest
          description: updateRequest
          required: true
          schema:
            $ref: '#/definitions/UpdateDataRequest'
      responses:
        '201':
          description: Created
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false

  # This call will now be duplicated. This one is kept for backwards compatibility, but given the issues found with data field exceeding the url length, 
  #  we add an equivalent one but that passes the payload as a json body on POST
  /sm/generateToken:
    get:
      tags:
        - SessionManager
      summary: 'Generates a signed token, only the sessionId as the payload, additionaly parameters include: The id of the requesting microservice (msA) and The id of the destination microservice (msB), may also include additional data Responds by code: New, additionalData: the jwt token'
      operationId: generateTokenUsingGET
      produces:
        - application/json
      parameters:
        - name: data
          in: query
          description: data
          required: false
          type: string
        - name: receiver
          in: query
          description: receiver
          required: true
          type: string
        - name: sender
          in: query
          description: sender
          required: true
          type: string
        - name: sessionId
          in: query
          description: sessionId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false


  /sm/validateToken:
    get:
      tags:
        - SessionManager
      summary: 'The passed security tokenâ€™s signature will be validated, as well as the validity as well as other validation measuresResponds by code: OK, sessionData.sessionId the sessionId used to gen. the jwt, and additionalData: extraData that were used to generate the jwt'
      operationId: validateTokenUsingGET
      produces:
        - application/json
      parameters:
        - name: token
          in: query
          description: token
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false

  # The new call:
  
  /sm/generateTokenWithPayload:
    post:
      tags:
        - SessionManager
      summary: 'Generates a signed token with the sessionId and the json payload sent in the body. Equivalent to /sm/generateToken but for bigger payloads'
      operationId: generateTokenWithPayloadUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: requestParameters
          description: The request params object, with json object, with the 'data' field filled in with the additional data to include on the token
          required: false
          schema:
            $ref: '#/definitions/requestParameters'
        - name: receiver
          in: query
          description: receiver
          required: true
          type: string
        - name: sender
          in: query
          description: sender
          required: true
          type: string
        - name: sessionId
          in: query
          description: sessionId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false




      
  ### Data Store Management API in the SM
  
  /sm/new/add:
    post:
      tags:
        - new-api-rest
      summary: >-
        adds the given data, under the provided session and for the given id.
        Error if no sesion is found
      operationId: addUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: updateRequest
          description: updateRequest
          required: false
          schema:
            $ref: '#/definitions/NewUpdateDataRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /sm/new/delete:
    post:
      tags:
        - new-api-rest
      summary: deletes the given object (based on id) from the session
      operationId: deleteUsingPOST
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: deleteRequest
          description: deleteRequest
          required: false
          schema:
            $ref: '#/definitions/NewUpdateDataRequest'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /sm/new/get:
    post:
      tags:
        - new-api-rest
      summary: >-
        returns in the extraData  the object (JSON strigified) for the given
        session id and object id, or if not object id, the array of all objects
        for the given sessionID
      operationId: getSessionDataUsingPOST_1
      consumes:
        - application/json
      produces:
        - application/json
      parameters:
        - in: body
          name: requestParameters
          description: The request params object, with json object, with the 'id' filed filled in with the id of the storeEntry to retrieve
          required: false
          schema:
            $ref: '#/definitions/requestParameters'
        - name: sessionId
          in: query
          description: sessionId
          required: true
          type: string
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /sm/new/search:
    post:
      tags:
        - new-api-rest
      summary: >-
        returns in the extraData field the array of JSON objects matching the
        given type, or if no type is given all session objects
      operationId: searchDataUsingPOST
      consumes:
        - application/json    
      produces:
        - application/json
      parameters:
        - name: sessionId
          in: query
          description: sessionId
          required: true
          type: string
        - in: body
          name: requestParameters
          description: The request params object, with json object, with the 'type' field filled in with the type of storeEntry objects to retrieve
          required: false
          schema:
            $ref: '#/definitions/requestParameters'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false
  /sm/new/startSession:
    post:
      tags:
        - new-api-rest
      summary: >-
        Starts a new session, by setting the code to NEW and the identifier at
        sessionData.sessionId
      operationId: startSessionUsingPOST_1
      consumes:
        - application/json    
      produces:
        - application/json
      parameters:
        - in: body
          name: requestParameters
          description: The request params object, with json object, with the 'sessionId' field filled in with the sessionID related to this session dataStore
          required: false
          schema:
            $ref: '#/definitions/requestParameters'
      responses:
        '200':
          description: OK
          schema:
            $ref: '#/definitions/SessionMngrResponse'
        '201':
          description: Created
        '401':
          description: Unauthorized
        '403':
          description: Forbidden
        '404':
          description: Not Found
      deprecated: false


      


      
      
####### ConfigManager ########



  /metadata/microservices:
    get:
      tags:
        - ConfigManager
      summary: Get the configuration metadata for all microservices.
      description: Get ...
      operationId: allMicroservicesGet
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/msMetadataList" 
  
  
  /metadata/microservices/{apiClass}:
    get:
      tags:
        - ConfigManager
      summary: Get the configuration metadata for all microservices of the specified api class.
      description: Get ...
      operationId: classMicroservicesGet
      produces:
        - "application/json"
      consumes:
        - application/json
      parameters:
        - name: "apiClass"  
          in: "path"
          required: true
          type: string
          #schema:
          #  $ref: '#/definitions/apiClassEnum'
      
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/msMetadataList"
        404:
          description: "Bad microservice type or none found"
      

  /metadata/externalEntities:
    get:
      tags:
        - ConfigManager
      summary: Get the list of available entity collections
      description: "Collections like: IDP, SP, AP, GW"
      operationId: entityCollectionsGet
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              type: string
        404:
          description: "External entities not found"

  
  /metadata/externalEntities/{collectionId}:
    get:
      tags:
        - ConfigManager
      summary: Get the list of entityMetadata objects for all the external entities belonging to a determined kind, set or collection.
      description: Get ...
      operationId: classEntitiesGet
      produces:
        - "application/json"
      parameters:
        - name: "collectionId"  
          in: "path"
          required: true
          type: string  #Unbound values, to avoid limiting the number of sets by default
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/entityMetadataList"
        404:
          description: "Collection not found"
  
  
  
  /metadata/externalEntities/{collectionId}/{entityId}:
    get:
      tags:
        - ConfigManager
      summary: Get the entityMetadata for the indicated external entity belonging to a determined set or kind.
      description: Get ...
      operationId: entityGet
      produces:
      - "application/json"
      parameters:
        - name: "collectionId"  
          in: "path"
          required: true
          type: string  #Unbound values, to avoid limiting the number of sets by default
        - name: "entityId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/entityMetadata"
        404:
          description: "Collection not found"


  /metadata/internal:
    get:
      tags:
        - ConfigManager
      summary: Get the list of available internal configurations
      description: "The metadata collections delivered through this interface should be only for internal use, so only the registered muÂ¡icroservices should be allowed to query them"
      operationId: internalConfsGet
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              type: string
        404:
          description: "Internal configurations not found"

  
  /metadata/internal/{confId}:
    get:
      tags:
        - ConfigManager
      summary: Get the configuration data for a given internal entity (the local GW, at the moment).
      description: Get ...
      operationId: configurationGet
      produces:
        - "application/json"
      parameters:
        - name: "confId"  
          in: "path"
          required: true
          type: string  #Unbound values, to avoid limiting the number of sets by default
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/entityMetadata"
        404:
          description: "Internal configuration not found"
          
          
          
  /metadata/attributes/:
    get:
      tags:
        - ConfigManager
      summary: "Get the list of available attribute profiles: eIDAS, eduPerson, etc."
      description: Get ...
      operationId: attributeProfilesGet
      produces:
      - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: array
            items:
              type: string
        404:
          description: "Attribute Profiles not found"

   
  /metadata/attributes/{attrProfileId}:
    get:
      tags:
        - ConfigManager
      summary: Get the attribute set for the profile just specified.
      description: Get ...
      operationId: attributeSetGet
      produces:
      - "application/json"
      parameters:
        - name: "attrProfileId"  
          in: "path"
          required: true
          type: string #Unbound values, to avoid limiting the number of sets by default
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/attributeTypeList" 
        404:
          description: "Attribute Profile not found"


  /metadata/attributes/{attrProfileId}/maps:
    get:
      tags:
        - ConfigManager
      summary: Get the list of mappings of attributes with other sets, for the profile just specified.
      description: Get ...
      produces:
      - "application/json"
      parameters:
        - name: "attrProfileId"  
          in: "path"
          required: true
          type: string #Unbound values, to avoid limiting the number of sets by default
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/attributeMapList"
        404:
          description: "Attribute Profile not found"




####### APIGatewayClient #######

  /cl/list/{collection}:
    get:
      tags:
        - APIGatewayClient
      summary: Get a collection of elements to be displayed on the selector widget.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "collection"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming list"
          schema:
            $ref: "#/definitions/displayableList"
        404:
          description: "Collection not found"
          
          
  /cl/session/start:
    get:
      tags:
        - APIGatewayClient
      summary: Start a session on the server, receive the session token for later reference. SessionId to be returned on the payload
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID" #To retake a session in case it already exists
          in: "query"
          required: false
          type: string
      responses:
        200:
          description: "Session started"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Session start error"

          
  /cl/session/end:
    get:
      tags:
        - APIGatewayClient
      summary: End a session on the server, receive the session token for later reference.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Session ended"
        404:
          description: "Session end error"

          
  /cl/auth/{moduleID}/login:
    get:
      tags:
        - APIGatewayClient
      summary: Login through a specifc auth method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"
          

  /cl/auth/{moduleID}/logout:
    get:
      tags:
        - APIGatewayClient
      summary: Logout through a specifc auth method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"


  /cl/auth/logout:
    get:
      tags:
        - APIGatewayClient
      summary: Logout from all logged-in modules (chain logout calls for all modules).
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/persistence/{moduleID}/load:
    get:
      tags:
        - APIGatewayClient
      summary: Load store with a specific persistence method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/persistence/{moduleID}/store:
    get:
      tags:
        - APIGatewayClient
      summary: Save user data on a store with a specific auth method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/source/{moduleID}/retrieve:
    get:
      tags:
        - APIGatewayClient
      summary: Fetch user identity data on the session store with a specific identity method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

  /cl/ident/source/{moduleID}/load:
    post:
      tags:
        - APIGatewayClient
      summary: Load an identity dataset retrieved on a client-side module. Notice that in this case the client must be trusted, so be careful when integrating sources with this api.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: dataset
          in: body
          description: The data set to add
          required: true
          schema:
            $ref: '#/definitions/dataSet'
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"
          
          
  /cl/ident/derivation/{moduleID}/generate:
    get:
      tags:
        - APIGatewayClient
      summary: Generate a derived identity through a specific method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"


  /cl/ident/mgr/list:
    get:
      tags:
        - APIGatewayClient
      summary: Get the list of user identity data sets currently    loaded or fetched in session.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Incoming list"
          schema:
            $ref: "#/definitions/dataStore"
        404:
          description: "Collection not found"
                    
          
  /cl/ident/mgr/{datasetID}/refresh:
    get:
      tags:
        - APIGatewayClient
      summary: Update a retrieved or derived identity already on the session store through the specific method module used to obtain it.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "datasetID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/mgr/{datasetID}/delete:
    get:
      tags:
        - APIGatewayClient
      summary: Delete a retrieved or derived identity already on the session store through the specific method module used to obtain it.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "datasetID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/mgr/{datasetID}/revoke:
    get:
      tags:
        - APIGatewayClient
      summary: Revoke a retrieved or derived identity already on the session store through the specific method module used to obtain it.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "datasetID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/request:
    post:
      tags:
        - APIGatewayClient
      summary: Request two data sets to be reconciled through a specific method module.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "datasetIDa"  
          in: "formData"
          required: true
          type: string
        - name: "datasetIDb"  
          in: "formData"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/{requestId}/status:
    get:
      tags:
        - APIGatewayClient
      summary: Request the status of a reconciliation request to a specific method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/{requestId}/cancel:
    get:
      tags:
        - APIGatewayClient
      summary: Request to cancel a reconciliation request on a specific method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/{requestId}/result:
    get:
      tags:
        - APIGatewayClient
      summary: Fetch the result of a reconciliation request to a specific method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/{requestId}/files/upload:
    post:
      tags:
        - APIGatewayClient
      summary: Upload a supporting file to a specific method module.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
        - name: "file"  
          in: "formData"
          required: true
          description: uploaded file (string with a json in form of the commented definition)
          type: string
          #$ref: '#/definitions/fileObject'
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/{requestId}/messages/send:
    post:
      tags:
        - APIGatewayClient
      summary: Send a message to a validation officer on a specific method module.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
        - name: "message"  
          in: "formData"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/ident/linking/{moduleID}/{requestId}/messages/receive:
    get:
      tags:
        - APIGatewayClient
      summary: Receive messages from a validation officer on a specific method module (on the response payload as a conversation object).
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/vc/issuing/{moduleID}/generate/{VCDefinition}:
    get:
      tags:
        - APIGatewayClient
      summary: Generate a verifiable claim through a specific method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"
          in: "path"
          required: true
          type: string
        - name: "VCDefinition"
          in: "path"
          description: As VCs will have a predefined form, we select the type somewhere else and just pass the type to the module that will know how to build it (and which data sources are needed)
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /cl/callback:
    get:
      tags:
        - APIGatewayClient
      summary: Set in Session the Return page in the client when invoking modules. This URL under the control of the client will allow it to retake control of the flow. ** Client must expect a msToken on the callback url **
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "ClientCallbackAddr"
          in: "query"
          required: true
          description: the actual callback url the modules will call when returning control to the client
          type: string            
      responses:
        200:
          description: "Callback registered"
        404:
          description: "Error registering callback"


  /cl/token/validate:
    get:
      tags:
        - APIGatewayClient
      summary: Now the callback address is on the client domain, the client will need some endpoint to validate the msToken the module will send along when calling the callback, to secure the app flow. The client will send the msToken to the api gw for validation through this call.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "msToken"
          in: "query"
          required: true
          description: B64 string with the received msToken
          type: string            
      produces:
        - application/json
      responses:
        '200':
          description: Result of the Token validation, sessionID and additional data
          schema:
            $ref: '#/definitions/SessionMngrResponse'
          
  

####### APIGatewaySP #######


  /spcl/list/{collection}:
    get:
      tags:
        - APIGatewaySP
      summary: Get a collection of elements to be displayed on the selector widget.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "collection"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming list"
          schema:
            $ref: "#/definitions/displayableList"
        404:
          description: "Collection not found"
          
          
  /spcl/session/start:
    get:
      tags:
        - APIGatewaySP
      summary: Start a session on the server, receive the session token for later reference.
      description: _
      produces:
        - "text/plain"
      parameters:
        - name: "sessionID" #To retake a session in case it already exists
          in: "query"
          required: false
          type: string
      responses:
        200:
          description: "Session started"
        404:
          description: "Session start error"

          
  /spcl/session/end:
    get:
      tags:
        - APIGatewaySP
      summary: End a session on the server, receive the session token for later reference.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Session ended"
        404:
          description: "Session end error"
          

  /spcl/auth/{moduleID}/login:
    get:
      tags:
        - APIGatewaySP
      summary: Login through a specifc auth method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"
          

  /spcl/persistence/{moduleID}/load:
    get:
      tags:
        - APIGatewaySP
      summary: Load store with a specific persistence method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /spcl/ident/mgr/return/{moduleID}:
    get:
      tags:
        - APIGatewaySP
      summary: Retrieve the response token for the SP, to redirect back to the SP specific module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  
####### RequestManager ####### 

  /rm/request:
    post:
      tags:
        - RequestManager
      summary: Pass a standard request object to be handled.
      description: Process an Authn or Data request
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "spRequest"
          in: "cookie"
          description: The standard request object representing the request the remote SP made
          required: true
          schema:
            $ref: "#/definitions/attributeSet"
        - name: "spMetadata"  
          in: "cookie"
          description: The metadata object of the remote SP that issued the request to the gateway
          required: true
          schema:
            $ref: "#/definitions/entityMetadata"
        - name: "apEntityId"
          in: "cookie"
          description: The id of the remote AP to query (this way, the acm will skip discovery UI)
          required: false
          type: string
        - name: "authenticationSet"
          in: "cookie"
          description: A standard response object containing a some of the attributes and values retrieved from the IDP bu the originating GW, so they can be passed to the AP for authentication (in this case, the destination GW trusts the authentication at the originating GW).
          required: false
          schema:
            $ref: "#/definitions/attributeSet"
      responses:
        200:
          description: "Request admitted"
        400:
          description: "Bad request"
        401:
          description: "Request not authorised"  
  
  
  /rm/response:
    post:
      tags:
        - RequestManager
      summary: Callback. Pass a standard response object to be handled.
      description: Process an Authn or Data response
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "dsResponse"  
          in: "cookie"
          description: The standard response object representing the response from the remote IdP or the data selected from the user store
          required: true
          schema:
            $ref: "#/definitions/attributeSet"
        - name: "dsMetadata"
          in: "cookie"
          description: The metadata object of the remote IdP that issued the response to the gateway, or the local SEAL metadata when data is collected from the user store
          required: true
          schema:
            $ref: "#/definitions/entityMetadata"
      responses:
        200:
          description: "Response admitted"
        400:
          description: "Bad response"
        401:
          description: "Not authorised"  
  
  

####### SPService #######

  /sp/response:
    post:
      tags:
        - SPService
      summary: Callback. Pass a standard response object to be handled.
      description: Process an Authn or Data response from the RequestManager to send it back to the remote SP
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "responseAssertions"  
          in: "cookie"
          description: The standard response object(s) representing the response(s) the remote IdP and/or SEAL issued
          required: true
          schema:
            $ref: "#/definitions/attributeSetList"
      responses:
        200:
           description: "Response admitted"
        400:
          description: "Bad response"
        401:
          description: "Not authorised"

          
  
####### AuthenticationSource #######

  /as/authenticate:
    post:
      tags:
        - AuthenticationSource
      summary: Pass a standard authn request object to be handled by an auth source ms.
      description: Process an Authn request
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "idpRequest"
          in: "cookie"
          description: The standard request object representing the request to be issued to the auth source
          required: true
          schema:
            $ref: "#/definitions/attributeSet"
        - name: "idpMetadata"  
          in: "cookie"
          description: The metadata object of the remote IDP that must be queried
          required: true
          schema:
            $ref: "#/definitions/entityMetadata"
      responses:
        200:
          description: "Request admitted"
        400:
          description: "Bad request"
        401:
          description: "Request not authorised"
  
  

####### IdentitySource #######

  /is/query:
    post:
      tags:
        - IdentitySource
      summary: Pass a data query request object to be handled by an identity module ms.
      description: Process a Data request
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "apRequest"
          in: "cookie"
          description: The standard request object representing the request to be issued to the identity source
          required: true
          schema:
            $ref: "#/definitions/attributeSet"
        - name: "apMetadata"
          in: "cookie"
          description: The metadata object of the remote AP that must be queried
          required: true
          schema:
            $ref: "#/definitions/entityMetadata"
        - name: "authenticationSet"
          in: "cookie"
          description: A standard response object containing the attributes retreved from the user authentication on SEAL, if any (for now, just ignore).
          required: false
          schema:
            $ref: "#/definitions/attributeSet"
      responses:
        200:
          description: "Request admitted"
        400:
          description: "Bad request"
        401:
          description: "Request not authorised"
  
  
  /is/load:
    post:
      tags:
        - IdentitySource
      summary: Passively provide trusted identity data from a trusted source to the identity source module. Can be used to implement a callback interface
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "emrtdDataset"
          in: cookie
          description: The data set to add
          required: true
          type: string #B64  $ref: '#/definitions/dataSet'
      responses:
        200:
          description: "Identity Dataset received"
        404:
          description: "Error receiving identity dataset"



####### Persistence #######

  /per/load:
    post:
      tags:
        - Persistence
      summary: Setup a persistence mechanism and load a secure storage into session.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
      responses:
        200:
          description: "Persistence storage loaded"
        404:
          description: "Error loading persistence storage"

  /per/store:
    post:
      tags:
        - Persistence
      summary: Save session data to the configured persistence mechanism (front channel).
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls.
          required: true
          type: string
      responses:
        200:
          description: "Persistence storage saved"
        404:
          description: "Error saving persistence storage"
          
  /per/load/{sessionToken}:
    post:
      tags:
        - Persistence
      summary: Silent setup of a persistence mechanism by loading a user-provided secure storage into session. (back channel).
      description: _
      consumes:
      - "application/json"
      parameters:
        - name: "sessionToken"
          in: "path"
          description: The session token 
          required: true
          type: string
        - name: "cipherPassword"
          in: "query"
          description: The password that needs to be used to decrypt the blob, if encrypted
          required: false
          type: string
        - in: body
          name: dataStore
          description: The data store to load
          required: true
          schema:
            $ref: '#/definitions/dataStore'
      responses:
        200:
          description: "Persistence storage loaded"
        404:
          description: "Error loading persistence storage"

  /per/store/{sessionToken}:
    get:
      tags:
        - Persistence
      summary: Save session data to the configured persistence mechanism (back channel). Might return the signed and possibly encrypted datastore
      description: _
      produces:
      - "application/json"
      parameters:
        - name: "sessionToken"
          in: "path"
          description: The session token 
          required: true
          type: string
        - name: "cipherPassword"
          in: "query"
          description: The password to encrypt the blob 
          required: false
          type: string
      responses:
        200:
          description: "Persistence storage saved"
        201:
          description: "Persistence storage attached"
          schema:
            $ref: "#/definitions/dataStore"
        404:
          description: "Error saving persistence storage"

  
####### IDBootstrapping #######

  /idboot/generate:
    post:
      tags:
        - IDBootstrapping
      summary: Generate a new identity in session and link it to the authenticated identity.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
      responses:
        200:
          description: "Identity generated"
          schema:
            $ref: "#/definitions/dataSet"
        404:
          description: "Error bootstrapping identity"

  /idboot/update/{datasetId}:
    post:
      tags:
        - IDBootstrapping
      summary: Refresh a derived identity in session (if persistent identity, this can be idle).
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
      - "application/json"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "datasetId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Identity refreshed"
          schema:
            $ref: "#/definitions/dataSet" 
        404:
          description: "Error refreshing identity"
          
          
  /idboot/update/{datasetId}/credentials:
    post:
      tags:
        - IDBootstrapping
      summary: Refresh the associated authentication credentials (if any) of a derived identity in session (if no credentials, this can be idle). Do not confuse with VCs
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "datasetId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Credetials refreshed"
        404:
          description: "Error refreshing credentials"


  /idboot/delete/{datasetId}:
    post:
      tags:
        - IDBootstrapping
      summary: Delete a derived identity in session.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "datasetId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Identity deleted"
        404:
          description: "Error deleting identity"


  /idboot/revoke:
    post:
      tags:
        - IDBootstrapping
      summary: Revoke a derived identity in session.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "datasetId"
          in: "formData"
          required: true
          type: string
      responses:
        200:
          description: "Identity revoked"
        404:
          description: "Error revoking identity"


  
####### IDLinking #######

  /link/request/submit:
    post:
      tags:
        - IDLinking
      summary: Start a link request.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "request"  
          in: "cookie"
          required: true
          schema:
            $ref: "#/definitions/linkRequest"
      responses:
        200:
          description: "Request submitted"
          schema: #Now the request has the requestID filled in
            $ref: "#/definitions/linkRequest"
        404:
          description: "Error sending message"
                    
          
  /link/{requestId}/status:
    get:
      tags:
        - IDLinking
      summary: Check the status of a link request.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "requestId"  
          in: "path"
          type: string
          required: true
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Incoming status"
          schema:
            $ref: "#/definitions/statusResponse"
        404:
          description: "Error requesting status"
  
  
  /link/{requestId}/cancel:
    post:
      tags:
        - IDLinking
      summary: Cancel a link request.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "requestId"  
          in: path
          type: string
          required: true
      responses:
        200:
          description: "Request canceled"
        404:
          description: "Error cancelling request"


  /link/{requestId}/files/upload:
    post:
      tags:
        - IDLinking
      summary: Upload a file to a request.
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "requestId"
          in: "path"
          type: string
          required: true
        - name: "file"  
          in: "formData"
          required: true
          description: the JSON object containing the uploaded file (a string with the definition in the comment)
          type: string
          #$ref: '#/definitions/fileObject'
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "File uploaded"
        404:
          description: "Error uploading file"


  /link/{requestId}/messages/send/{recipient}:
    post:
      tags:
        - IDLinking
      summary: Send a message to a validation officer or requester in the context of a link request.
      description: _
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "requestId"  
          in: "path"
          required: true
          type: string
        - name: "recipient"  
          in: "path"
          required: true
          type: string
          enum:
            - officer
            - requester
        - name: "message"  
          in: "formData"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Message sent"
        404:
          description: "Error sending message"
          

  /link/{requestId}/messages/receive:
    get:
      tags:
        - IDLinking
      summary: Receive messages from a conversation in the context of a link request.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "requestId"  
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Incoming messages"
          schema:
            $ref: "#/definitions/conversation"
        404:
          description: "Error fetching messages"
      
          
          
  /link/{requestId}/result/get:
    post:
      tags:
        - IDLinking
      summary: Receive resolution of a link request.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "requestId"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming result"
          schema: #Request will now have the resolution field filled in
            $ref: "#/definitions/linkRequest"
        403:
          description: "Link was rejected"
        404:
          description: "Error fetching result"
          

#API for validator clients. We assume the user is authenticated and this will be chekced inside the implememntation, as well as its clearance to do the operations
          
  /link/{requestId}/lock:
    get:
      tags:
        - IDLinking
      summary: Reserve exclusive access to a link request. Should have a timeout by default
      description: _
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Request locked"
        404:
          description: "Error fetching messages"

          
  /link/{requestId}/unlock:
    get:
      tags:
        - IDLinking
      summary: Release exclusive access to a link request.
      description: _
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Request unlocked"
        404:
          description: "Error fetching messages"
          
          
  /link/{requestId}/get:
    get:
      tags:
        - IDLinking
      summary: Get a link request.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Incoming request"
          schema:
            $ref: "#/definitions/linkRequest"
        404:
          description: "Error getting request"
          
          
          
                    
          
  /link/list:
    get:
      tags:
        - IDLinking
      summary: Receive a list of link request that can be treated by the user.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Incoming request"
          schema: #Request will now have the resolution field filled in
            $ref: "#/definitions/linkRequestList"
        404:
          description: "Error fetching messages"  




  /link/{requestId}/approve:
    get:
      tags:
        - IDLinking
      summary: Approve a locked link request.
      description: _
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Request Approved"
        404:
          description: "Error approving request"
          
          
  /link/{requestId}/reject:
    get:
      tags:
        - IDLinking
      summary: Reject a locked link request.
      description: _
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Request Rejected"
        404:
          description: "Error rejecting request"


  /link/{requestId}/files/download/list:
    get:
      tags:
        - IDLinking
      summary: Download the list of files attached to a request.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Incoming File list"
          schema:
            $ref: "#/definitions/fileList"
        404:
          description: "Error getting request file list"


  /link/{requestId}/files/download/{fileID}:
    get:
      tags:
        - IDLinking
      summary: Download the list of files attached to a request.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "requestId"
          in: "path"
          required: true
          type: string
        - name: "fileID"
          in: "path"
          required: true
          type: string
        - name: "sessionToken"
          in: "query"
          description: if the module requires some kind of authorisation and officer identification
          required: false
          type: string
      responses:
        200:
          description: "Incoming File"
          schema:
            $ref: '#/definitions/fileObject'
        404:
          description: "Error getting request"


  
####### APIGatewayLink #######

  /linkapp/list/{collection}:
    get:
      tags:
        - APIGatewayLink
      summary: Get a collection of elements to be displayed on the selector widget.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "collection"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming list"
          schema:
            $ref: "#/definitions/displayableList"
        404:
          description: "Collection not found"
          
          
  /linkapp/session/start:
    get:
      tags:
        - APIGatewayLink
      summary: Start a session on the server, receive the session token for later reference.
      description: _
      produces:
        - "text/plain"
      parameters:
        - name: "sessionID" #To retake a session in case it already exists
          in: "query"
          required: false
          type: string
      responses:
        200:
          description: "Session started"
        404:
          description: "Session start error"

          
  /linkapp/session/end:
    get:
      tags:
        - APIGatewayLink
      summary: End a session on the server, receive the session token for later reference.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Session ended"
        404:
          description: "Session end error"
          

  /linkapp/auth/{moduleID}/login:
    get:
      tags:
        - APIGatewayLink
      summary: Login through a specifc auth method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

          
  /linkapp/auth/logout:
    get:
      tags:
        - APIGatewayLink
      summary: Logout on the used auth method module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"

  
  /linkapp/modules/list:
    get:
      tags:
        - APIGatewayLink
      summary: Get a list of pending link requests that can be handled, from all modules by the authenticated official.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
      responses:
        200:
          description: "Incoming list"
          schema:
            $ref: "#/definitions/displayableList"
        404:
          description: "Collection not found"

          
  /linkapp/requests/{moduleID}/list:
    get:
      tags:
        - APIGatewayLink
      summary: Get a list of pending link requests that can be handled by the authenticated official on a specific module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming list"
          schema:
            $ref: "#/definitions/displayableList"
        404:
          description: "Collection not found"

  
  /linkapp/requests/{moduleID}/{requestId}/lock:
    get:
      tags:
        - APIGatewayLink
      summary: Lock a pending link request to prevent other officials from handling it, on a specific module.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Request locked"
        403:
          description: "Requets already locked"
        404:
          description: "Error locking request"

  
  /linkapp/requests/{moduleID}/{requestId}/unlock:
    get:
      tags:
        - APIGatewayLink
      summary: Release a locked a pending link request so other officials can handle it, on a specific module.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Request unlocked"
        403:
          description: "Request already unlocked"
        404:
          description: "Error locking request"

  
  /linkapp/requests/{moduleID}/{requestId}/get:
    get:
      tags:
        - APIGatewayLink
      summary: Get a pending link request from a specific module.
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming request"
          schema:
            $ref: "#/definitions/linkRequest"
        404:
          description: "Error getting request"


  /linkapp/requests/{moduleID}/{requestId}/approve:
    get:
      tags:
        - APIGatewayLink
      summary: Approve a pending link request from a specific module.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Request approved"
        404:
          description: "Error approving request"


  /linkapp/requests/{moduleID}/{requestId}/reject:
    get:
      tags:
        - APIGatewayLink
      summary: Approve a pending link request from a specific module.
      description: _
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Request rejected"
        404:
          description: "Error rejecting request"


  /linkapp/requests/{moduleID}/{requestId}/files/download/list:
    get:
      tags:
        - APIGatewayLink
      summary: Get the list of files uploaded for a given request in a module
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming File list"
          schema:
            $ref: "#/definitions/fileList"
        404:
          description: "Error getting request file list"


  /linkapp/requests/{moduleID}/{requestId}/files/download/{fileID}:
    get:
      tags:
        - APIGatewayLink
      summary: Get a file for a given request in a module
      description: _
      produces:
        - "application/json"
      consumes:
        - "*/*"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
        - name: "fileID"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Incoming File"
          schema:
            $ref: '#/definitions/fileObject'
        404:
          description: "Error getting request"
 
  
  /linkapp/requests/{moduleID}/{requestId}/messages/send:
    post:
      tags:
        - APIGatewayLink
      summary: Send a message to a requester on a specific method module.
      description: _
      produces:
        - "application/json"
      consumes:
        - "application/x-www-form-urlencoded"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
        - name: "message"  
          in: "formData"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"
          
          
  /linkapp/requests/{moduleID}/{requestId}/messages/receive:
    get:
      tags:
        - APIGatewayLink
      summary: Receive messages from a requester on a specific method module (on the response payload as a conversation object).
      description: _
      produces:
        - "application/json"
      parameters:
        - name: "sessionID"
          in: "query"
          required: true
          type: string
        - name: "moduleID"  
          in: "path"
          required: true
          type: string
        - name: "requestId"  
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "Module access trigger"
          schema:
            $ref: "#/definitions/moduleTrigger"
        404:
          description: "Error accessing module"



####### VerifiableClaimIssuing #######

  /vc/issue/{VCDefinition}:
    post:
      tags:
        - VerifiableClaimIssuing
      summary: Produce a verifiable claim of the indicated type
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
        - name: "VCDefinition"
          in: "path"
          required: true
          type: string
      responses:
        200:
          description: "VC issued and stored in wallet"
        404:
          description: "Error generating VC"
          
          
  /vc/didAuth:
    post:
      tags:
        - VerifiableClaimIssuing
      summary: Challenge a wallet to be recognised as the owner of some DID
      description: _
      consumes:
      - "application/x-www-form-urlencoded"
      parameters:
        - name: "msToken"
          in: "formData"
          description: The security token for ms to ms calls
          required: true
          type: string
      responses:
        200:
          description: "DID authentication successful"
        403:
          description: "DID authentication failed"
        404:
          description: "Error doing DID authentication"

#  /vcissuing/revoke:  # TODO


####### Revocation #######

  /revoked/list/set:
    get:
      tags:
        - Revocation
      summary: Submit a list of revoked data set or verifiable claim IDs.
      description: _
      consumes:
        - "application/json"
      parameters:
        - in: body
          name: revocationList
          description: List of revoked data sets or VCs
          required: true
          schema:
            $ref: '#/definitions/revocationList'
      responses:
        200:
          description: "Revocation list set"
        404:
          description: "Error setting revocation list"

          
  /revoked/list/get:
    get:
      tags:
        - Revocation
      summary: Fetch a list of revoked data set or verifiable claim IDs.
      description: _
      produces:
        - "application/json"
      responses:
        200:
          description: "Revocation list"
          schema:
            $ref: '#/definitions/revocationList'
        404:
          description: "Error getting revocation list"

          
  /revoked/{datasetID}/:
    get:
      tags:
        - Revocation
      summary: Check if a data set or verifiable claim is revoked.
      description: _
      consumes:
        - "application/json"
      parameters:
        - in: path
          name: datasetID
          description: data set id to check
          required: true
          type: string
      responses:
        200:
          description: "Valid"
        403:
          description: "Revoked"
        404:
          description: "Error checking revocation"

  
  
  
  








          
  
  
  
      
definitions:


####### SessionManager ########


  MngrSessionTO:
    type: object
    required: [sessionId]
    properties:
      sessionId:
        type: string
      sessionVariables:
        type: object
    title: MngrSessionTO

  SessionMngrResponse:
    type: object
    properties:
      additionalData:
        type: string
      code:
        type: string
        enum:
          - OK
          - ERROR
          - NEW
      error:
        type: string
      sessionData:
        $ref: '#/definitions/MngrSessionTO'
    title: SessionMngrResponse

  UpdateDataRequest:
    type: object
    properties:
      dataObject:
        type: string
      sessionId:
        type: string
      variableName:
        type: string
    title: UpdateDataRequest
    
  NewUpdateDataRequest:
    type: object
    properties:
      data:
        type: string
      id:
        type: string
      sessionId:
        type: string
      type:
        type: string
    title: NewUpdateDataRequest
    

  View:
    type: object
    properties:
      contentType:
        type: string
    title: View


  requestParameters:
    type: object
    properties:
      data:
        type: string
      id:
        type: string
      sessionId:
        type: string
      type:
        type: string
    title: requestParameters


####### ConfigManager ########

  #Descriptor Object of a Microservice
  msMetadata:
    description: Specification of a given microservice.
    type: object
    properties:
      msId:
        description: A unique readable name for a microservice.
        type: string
      authorisedMicroservices:
        type: array
        description: List of ms identifiers that will be authorised to contact this microservice (will be used by the SM when validating a token).
        items:
          type: string
      rsaPublicKeyBinary:
        description: Public key of the microservice in B64. The ms will keep their own private key.
        type: string
      publishedAPI:
        type: array
        description: List of the interfaces api endpoints implememnted by this ms (this will determine which types does the ms belong to)
        items:
          $ref: '#/definitions/publishedApiType'
  
  
  publishedApiType:
    description: Endpoint descriptor, where requests can be made
    type: object
    properties:
      apiClass:
        $ref: '#/definitions/apiClassEnum'
      apiCall:
        type: string
      apiConnectionType:
        $ref: '#/definitions/apiConnectionType'
      apiEndpoint:
        type: string
  
  
  apiConnectionType:
    type: string
    enum:
      - post
      - get

      
  msMetadataList:
    type: array
    items: 
      $ref: '#/definitions/msMetadata'
      

      
  
            
  #Types of Microservice #TODO, update
  apiClassEnum:
    type: string
    enum:
      - APIGW



    
  
  # Descriptor Object for an External Entity (data source, authsource)
  entityMetadata:
    description: Information about the an external entity
    type: object
    required: [entityId]
    properties:
      entityId:
        description: Unique identifier of the entity, usually a metadata url
        type: string
        example: "https://esmo.uji.es/gw/saml/idp/metadata.xml"
      defaultDisplayName:
        description: Name to be displayed on UI, in the default language/encoding
        type: string
        example: "UJI Identity Provider"
      displayNames:
        description: list of alternative display names, by language or encoding
        type: object
        additionalProperties:
            type: string
        example: {"ES" : "UJI Proveedor de Identidad","EN" : "UJI Identity Provider"}
      logo:
        description: B64 string with an image binary to be displayed at UI
        type: string
        example: "AWDGRsFbFDEfFGTNNJKKYGFVFfDDSSSDCCC=="
      location:
        description: unspecified list of information items about the physical or political location of the entity, to facilitate discovery
        type: array
        items:
          type: string
      protocol:
        description: Which protocol does this entity support (SAML, OIDC, etc.)
        type: string
      microservice:
        description: list of identifiers of microservice able to handle this external entity
        type: array
        items:
          type: string
      claims:
        description: list of attributes supported/requested by default by this entity
        type: array
        items:
          type: string
        example: ["displayName","surname","dateOfBirth","eduPersonAffiliation"]
      endpoints:
        description: List of service endpoints, where this Entity will accept requests/responses.
        type: array
        items:
          $ref: '#/definitions/endpointType'
      securityKeys:
        description: List of keys held by this entity
        type: array
        items:
          $ref: '#/definitions/securityKeyType'
      encryptResponses:
        description: whether this entity will issue/expect encrypted responses
        type: boolean
        example: false
      supportedEncryptionAlg:
        description: list of supported encryption algorithms
        type: array
        items:
          type: string
        example: ["AES256","AES512"]
      signResponses:
        description: whether this entity will issue/expect signed responses
        type: boolean
        example: true
      supportedSigningAlg:
        description: list of supported signing algorithms
        type: array
        items:
          type: string
        example: ["RSA-SHA256"]
      otherData:
        description: Dictionary of additional fields, specific for a certain entity type or protocol
        type: object
        additionalProperties: true   #Indicates free-form object
        example: ["attributeMappingToEIDAS" : {"displayName" : "CurrentGivenName", "surname" : "CurrentFamilyName"}]
 
 
  entityMetadataList:
     type: array
     items: 
       $ref: '#/definitions/entityMetadata'
      
  
    
  endpointType:
    description: Endpoint descriptor, where requests can be made or responses sent.
    type: object
    properties:
      type:
        description: String identifying the kind of endpoint (depends on each protocol)
        type: string
        example: "SSOService"
      method: 
        description: String identifying the method to access the endpoint (depends on each protocol, i.e. HTTP-POST).
        type: string
        example: "HTTP-POST"
      url:
        description: Access url of the endpoint 
        type: string
        example: "https://esmo.uji.es/gw/saml/idp/SSOService.php"

        
  securityKeyType:
    description: Descriptor of a key or certificate.
    type: object
    properties:
      keyType:
        description: String identifying the kind of key
        type: string
        example: "RSAPublicKey"
      usage: 
        description: To which use is this key intended.
        type: string
        enum:
            - signing
            - encryption
        example: "signing"
      key:
        description: B64 string representing the key binary 
        type: string
        example: "MDAACaFgw...xFgy="



        

        
  attributeType:
    description: Contents of an attribute item.
    type: object
    properties:
      name:
        description: Unique class identifier of the attribute
        type: string
        example: "http://eidas.europa.eu/attributes/naturalperson/CurrentGivenName"
      friendlyName:
        description: Class identifier of the attribute (short version, might have collisions)
        type: string
        example: "CurrentGivenName"
      encoding:
        description: String identifying the encoding method:"UTF-8" , "BASE64", etc.
        type: string
        example: "plain"
      language:
        description: String identifying the language code of the value contents
        type: string
        example: "ES_es"
      mandatory:
        description: To mark the mandatoriness of the attribute.
        type: boolean
        example: true
      values:
        description: List of values for the attribute
        type: array
        items:
          type: string
        example: ["JOHN"]


  attributeTypeList:
      type: array
      items: 
        $ref: '#/definitions/attributeType'



        
####### RequestManager #######

 # Descriptor Object for an Attribute Set (a data request or response)
  attributeSet:
    description: Object representing a generic request/response. Used for in-application transference of the security assertions or claims containing trusted user information (attribute values); also to set the list of attributes to be requested.
    type: object
    properties:
      id:
        description: Unique identifier of the set
        type: string
        example: "6c0f70a8-f32b-4535-b5f6-0d596c52813a"
      type:
        description: Kind of set
        type: string
        enum:
            - Request
            - Response
            - AuthResponse
        example: "Response"
      issuer:
        description: ID of the External Entity which issued the set
        type: string
        example: "https://esmo.uji.es/gw/saml/idp/metadata.xml"
      recipient:
        description: ID of the External Entity which the set is addressed to
        type: string
        example: "https://esmo.uji.es/gw/saml/sp/metadata.xml"
      inResponseTo:
        description: In response objects, the ID of the request which the set is responding to
        type: string
        example: "aaaa70a8-f32b-4535-b5f6-0d596cbbbbb"
      loa:
        description: Level of trust of the authentication related to the set, if it is a response for an eIDAS authentication request
        type: string
        example: "http://eidas.europa.eu/LoA/substantial"
      notBefore:
        description: Minimum validity date of the set
        type: string
        example: "2018-12-06T19:40:16Z"
      notAfter:
        description: Maximum validity date of the set
        type: string
        example: "2018-12-06T19:45:16Z"
      status:
        description: "To represent the tatus of the set (ok, error, etc.)."
        $ref: '#/definitions/attributeSetStatus'
      attributes:
        description: The list of the attributes or claims related to the user, contained on the set
        type: array
        items:
            $ref: '#/definitions/attributeType'
      properties:
        description: Dictionary of additional fields of data related to the attributes in the set(strings only), specific for a certain entity type or protocol. List of useful metadata related to the attributes and any specific information that came with the remote SP/RP request (or was filled in with metadata stored presets for said SP/RP) and might be of need for some implementation of the local SP to issue the authentication request.
        type: object
        #Indicates free-form object
        additionalProperties:
            type: string       

            
  attributeSetStatus:
    type: object
    properties:
      code:
        description: main standard status code from a closed list.
        type: string
        enum:
            - OK
            - ERROR
      subcode:
        description: free text field to represent status codes, open for specific applications or fluxes.
        type: string
      message:
        description: a free text string to provide human-readable status-error information
        type: string

            
            
  attributeSetList:
      type: array
      items: 
        $ref: '#/definitions/attributeSet'


        
  attributeMap:
    description: Represent semantic equivalence relationships between attribute groups. Groups can be either single attributes or formed by regexp transformation (match and replace) of the result of concatenation of attributes and literal strings.
    type: object
    properties:
      description:
        description: Name or explain the mapping
        type: string
      pairings:
        description: A list of groups that are semantically equivalent
        type: array
        items:
          type: object
          properties:
            profile:
              description: Attribute profile which this group belongs to
              example: eIDAS
              type: string
            issuer:
              description: ID of the entity that emmitted the attributes on this group. If specified, this equivalence will only apply to attributes coming from the correspondign issuer
              example: http://clave.redsara.es/
              type: string
            attributes:
              description: Array of attribute names (can be a single one) and/or string literals that will concatenate to form the group. Items starting with $ will be considered as attribute names, and will be substitutied by its value. Literal strings starting with $ must escape it "\$"
              example:  ["$surname1","#","$surname2"]
              type: array
              items:
                type: string
            regexp:
              description: If set, the result of the concatenation will be matched towards this PERL compatible regexp (no match will return an empty string). Can be used to transform or to ensure a given format.
              example: "^(-,a-zA-Z)+#(-,a-zA-Z)+$"
              type: string
            replace:
              description: If set, this is what will be returned after matching the regexp. Sub-match numeric placeholders can be used as in a PERL compatible regexp.
              example: \1 \2
              type: string 
            
    
  attributeMapList:
    type: array
    items: 
      $ref: '#/definitions/attributeMap'



      
####### APIGateway #######


  moduleTrigger:
    description: Response object of the API GW. Returns data, status and commands how to deal the loading of a specific module
    type: object
    properties:
      payload:
        type: object
        description: Response data. Any object format
      status:
        type: object
        description: Status of the response
        properties:
          message:
            type: string
          mainCode:
            type: string
          secondaryCode:
            type: string
      access:
        type: object
        description: If the response commands the client to access elsewhere, this field will tell where and how
        properties:
          binding:
            type: string
            description: Mechanism to access the delegated resource
            enum:
              - HTTP-POST-REDIRECT
              - HTTP-GET-REDIRECT
              - HTTP-GET
              - HTTP-POST
              - HTTP-GET-SIG
              - HTTP-POST-SIG
              - LOC-FUNC-CALL
              - LOCAL-PROT-HANDLER
          target:
            type: string
            description: the location to access the resource (URL, callback function, etc.)
          contentType:
            type: string
            description: the MIME type of the body, if any
          bodyContent:
            type: string
            description: If the access method requires to transfer data on the body of the request, it will be written here


####### Persistence #######



  dataSet:
    description: Object representing a generic identity data set, retrieved from some source and stored on a user store.
    type: object
    properties:
      id:
        description: Unique identifier of the set
        type: string
        example: "6c0f70a8-f32b-4535-b5f6-0d596c52813a"
      type:
        description: To define different kinds of datasets, to establish classifications
        type: string
      categories:
        description: To define multiple classes where the data set can be grouped.
        type: array
        items:
          type: string
      issuerId:
        description: Name of the attribute that is the ID of the entity that issued the data set, a kind of pointer to the property ID.
        type: string
      subjectId:
        description: Name of the attribute that is the ID of the data owner, a kind of pointer to the attribute ID.
        type: string
      loa:
        description: Level of assurance of the authenticity of the data/authentication
        type: string
      issued:
        description: Date when the data set was retrieved from its source
        type: string
        example: "2018-12-06T19:40:16Z"
      expiration:
        description: Maximum validity date of the set (empty means permanent)
        type: string
        example: "2018-12-06T19:45:16Z"
      attributes:
        description: The list of the identity attributes or claims contained on the set
        type: array
        items:
            $ref: '#/definitions/attributeType'
      properties:
        description: Dictionary of additional fields of data related to the attributes in the set(strings only) for any specific purpose.
        type: object
        #Indicates free-form object
        additionalProperties:
            type: string       

 

  dataStore:
    type: object
    description: Represents a clear, encrypted and/or signed data set.
    properties:
      id:
        description: Unique identifier of the set
        type: string
        example: "6c0f70a8-f32b-4535-b5f6-0d596c52813a"
      encryptedData:
        type: string
        description: If the data store is encrypted, this will be set. B64 string
      signature:
        type: string
        description: If the data store is signed, signature goes here. B64 string. Sign always the decrypted dataset.
      signatureAlgorithm:
        type: string
        description: Descriptor of the signature algorithm used.
      encryptionAlgorithm:
        description: Descriptor of the encryption algorithm used.
        type: string
      clearData:
        description: If the data store is in cleartext, this will be set
        type: array
        items: 
          $ref: '#/definitions/storeEntry'



  storeEntry:
    type: object
    description: Wrapper object to allow multiple kinds of objects stored on the dataStore.
    properties:
      id:
        description: A unique and persistent identifier for the object, for a given source, issuer and subject
        type: string
        example: "eidas-es-0d596c52813a"
      type:
        description: The classname of the contained object
        type: string
        example: "linkRequest"
      data:
        description: The object to be stored. Any object, but mainly dataSet and linkRequest
        type: object
        additionalProperties: true   #Indicates free-form object
    
 
  storeEntryList:
    type: array
    items: 
      $ref: '#/definitions/storeEntry'
 
    
    
    
####### IDLinking #######

  fileObject:
    type: object
    properties:
      filename:
        type: string
      fileID:
        type: string
      contentType:
        type: string
        description: MIME type of the file content
      fileSize:
        type: integer
      content:
        type: string
        format: byte    
        description: If not empty, the b64 encoded content of the file.



  fileList:
    description: List of file metadata objects
    type: array
    items:
      $ref: '#/definitions/fileObject'



  linkRequest:
    description: Represents a linking request, as well as its resolution and the resulting linking dataset
    type: object
    properties:
      id:
        description: Unique identifier of the set
        type: string
        example: "6c0f70a8-f32b-4535-b5f6-0d596c52813a"
      issuer:
        description: Name of the entity that issued the link.
        type: string
      type:
        description: Type of set.
        type: string
      lloa: 
        description: Level of certainty that both subjects are the same person
        type: string
      issued:
        description: Date when the link was certified (the date this data set was issued)
        type: string
        example: "2018-12-06T19:40:16Z"
      expiration:
        description: Maximum validity date of the link (empty means permanent)
        type: string
        example: "2018-12-06T19:45:16Z"
      uri:
        description: one-line URI representation of this link, once it has been issued
        type: string
        example: "urn:mace:project-seal.eu:link:project-seal.eu_automatedLink:low:GR%2FES%2F12345678A:eIDAS_ES:someone%40university.gr:EduGAIN_university.gr"
      datasetA:
        description: The dataset containing identity attributes or claims set A
        $ref: '#/definitions/dataSet'
      datasetB:
        description: The dataset containing identity attributes or claims set B
        $ref: '#/definitions/dataSet'
      evidence:
        type: array
        description: List of additional files uploaded to the validator to check the person behind the identities
        items:
            $ref: '#/definitions/fileObject'
      conversation:
        type: array
        description: List of messages exchanged between the requester and the validation officer
        items:
            $ref: '#/definitions/message'



  linkRequestList:
    description: List of linking requests
    type: array
    items:
      $ref: '#/definitions/linkRequest'




  message:
    type: object
    properties:
      timestamp:
        type: integer
        description: date and time when the message was sent
      sender:
        type: string
        description: Identifier of the user who sent the message
      senderType:
        type: string
        description: Identifier of the user category who sent the message
      recipient:
        type: string
        description: Identifier of the user whom the message is addressed to
      recipientType:
        type: string
        description: Identifier of the user category whom the message is addressed to
      message:
        type: string
        description: Content of the message


  conversation:
    description: List of messages exchanged between two users
    type: array
    items:
      $ref: '#/definitions/message'



  statusResponse:
    description: Generic Status response
    type: object
    properties:
        primaryCode:
          description: generic status description object
          type: string
          enum:
            - OK
            - ERROR
        secondaryCode:
          type: string
          description: Optional field for module specific status codes
        message:
          type: string
          description: Any message that might be of use to understand the status



  linkRequestStatus:
    description: specific status codes of a link request (to be used on the secondaryCode field of statusResponse)
    type: string
    enum:
      - PENDING
      - LOCKED
      - ACCEPTED
      - REJECTED 

           
####### IDBootstrapping #######
####### APIGatewayLink #######
####### VerifiableClaimIssuing #######
####### APIGatewaySP #######
####### SPService #######
####### AuthenticationSource #######
####### IdentitySource #######


####### Revocation #######

  revocationList: ## TODO
    type: object



  displayableList:
    type: array
    items:
      type: object #Generic object, collections will be from a
                   #base common "displayable" class, but I think this does not
                   #support inheritance
  




    









